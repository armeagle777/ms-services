generator client {
  provider = "prisma-client-js"
  output   = "../../generated/workPermitDb"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL_WORKPERMIT")
}

model check_histories {
  id                            BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  claim_id                      BigInt    @db.UnsignedBigInt
  user_id                       BigInt?   @db.UnsignedBigInt
  comment                       String?   @db.Text
  left_country                  Boolean
  left_date                     DateTime? @db.DateTime(0)
  deported                      Boolean?
  deport_decision_number        String?   @db.VarChar(50)
  deport_decision_document_path String?   @db.VarChar(255)
  deport_date                   DateTime? @db.DateTime(0)
  last_checked                  Boolean   @default(true)
  created_at                    DateTime? @db.Timestamp(0)
  updated_at                    DateTime? @db.Timestamp(0)
  claims                        claims    @relation(fields: [claim_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "check_histories_claim_id_foreign")
  users                         users?    @relation(fields: [user_id], references: [id], onUpdate: NoAction, map: "check_histories_user_id_foreign")

  @@index([claim_id], map: "check_histories_claim_id_foreign")
  @@index([user_id], map: "check_histories_user_id_foreign")
}

model claim_deadlines {
  id           BigInt      @id @default(autoincrement()) @db.UnsignedBigInt
  claim_id     BigInt      @db.UnsignedBigInt
  structure_id BigInt?     @db.UnsignedBigInt
  sub_claim_id BigInt?     @db.UnsignedBigInt
  deadline     DateTime    @db.DateTime(0)
  is_active    Boolean     @default(true)
  created_at   DateTime?   @db.Timestamp(0)
  updated_at   DateTime?   @db.Timestamp(0)
  claims       claims      @relation(fields: [claim_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "claim_deadlines_claim_id_foreign")
  structures   structures? @relation(fields: [structure_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "claim_deadlines_structure_id_foreign")
  sub_claims   sub_claims? @relation(fields: [sub_claim_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "claim_deadlines_sub_claim_id_foreign")

  @@index([claim_id], map: "claim_deadlines_claim_id_foreign")
  @@index([structure_id], map: "claim_deadlines_structure_id_foreign")
  @@index([sub_claim_id], map: "claim_deadlines_sub_claim_id_foreign")
}

model claim_files {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  claim_id   BigInt    @db.UnsignedBigInt
  user_id    BigInt?   @db.UnsignedBigInt
  type       String    @db.VarChar(255)
  path       String    @db.VarChar(255)
  active     Boolean   @default(true)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  claims     claims    @relation(fields: [claim_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "claim_files_claim_id_foreign")
  users      users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "claim_files_user_id_foreign")

  @@index([claim_id], map: "claim_files_claim_id_foreign")
  @@index([user_id], map: "claim_files_user_id_foreign")
}

model claim_status_logs {
  id           BigInt      @id @default(autoincrement()) @db.UnsignedBigInt
  claim_id     BigInt      @db.UnsignedBigInt
  user_id      BigInt?     @db.UnsignedBigInt
  structure_id BigInt?     @db.UnsignedBigInt
  from         String?     @db.VarChar(255)
  to           String?     @db.VarChar(255)
  comment      String?     @db.VarChar(255)
  from_cancel  Boolean     @default(false)
  created_at   DateTime?   @db.Timestamp(0)
  updated_at   DateTime?   @db.Timestamp(0)
  claims       claims      @relation(fields: [claim_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "claim_status_logs_claim_id_foreign")
  structures   structures? @relation(fields: [structure_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "claim_status_logs_structure_id_foreign")
  users        users?      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "claim_status_logs_user_id_foreign")

  @@index([claim_id], map: "claim_status_logs_claim_id_foreign")
  @@index([structure_id], map: "claim_status_logs_structure_id_foreign")
  @@index([user_id], map: "claim_status_logs_user_id_foreign")
}

model claims {
  id                                               BigInt                        @id @default(autoincrement()) @db.UnsignedBigInt
  user_id                                          BigInt?                       @db.UnsignedBigInt
  vacancy_id                                       BigInt?                       @db.UnsignedBigInt
  in_progress_vacancy_id                           BigInt?                       @db.UnsignedBigInt
  employee_id                                      BigInt?                       @db.UnsignedBigInt
  eaeu_employee_id                                 BigInt?                       @db.UnsignedBigInt
  eaeu_employee_family_member_id                   BigInt?                       @db.UnsignedBigInt
  type                                             String?                       @db.VarChar(255)
  ms_employee_id                                   BigInt?                       @db.UnsignedBigInt
  ms_from_id                                       BigInt?                       @db.UnsignedBigInt
  ms_to_id                                         BigInt?                       @db.UnsignedBigInt
  flag                                             String                        @default("new") @db.VarChar(5)
  status                                           String?                       @db.VarChar(255)
  created_at                                       DateTime?                     @db.Timestamp(0)
  updated_at                                       DateTime?                     @db.Timestamp(0)
  check_histories                                  check_histories[]
  claim_deadlines                                  claim_deadlines[]
  claim_files                                      claim_files[]
  claim_status_logs                                claim_status_logs[]
  eaeu_employee_family_members                     eaeu_employee_family_members? @relation(fields: [eaeu_employee_family_member_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "claims_eaeu_employee_family_member_id_foreign")
  eaeu_employees                                   eaeu_employees?               @relation(fields: [eaeu_employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "claims_eaeu_employee_id_foreign")
  employees                                        employees?                    @relation(fields: [employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "claims_employee_id_foreign")
  in_progress_vacancies                            in_progress_vacancies?        @relation(fields: [in_progress_vacancy_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "claims_in_progress_vacancy_id_foreign")
  ms_employees_claims_ms_employee_idToms_employees ms_employees?                 @relation("claims_ms_employee_idToms_employees", fields: [ms_employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "claims_ms_employee_id_foreign")
  ms_employees_claims_ms_from_idToms_employees     ms_employees?                 @relation("claims_ms_from_idToms_employees", fields: [ms_from_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "claims_ms_from_id_foreign")
  ms_employees_claims_ms_to_idToms_employees       ms_employees?                 @relation("claims_ms_to_idToms_employees", fields: [ms_to_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "claims_ms_to_id_foreign")
  users                                            users?                        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "claims_user_id_foreign")
  vacancies                                        vacancies?                    @relation(fields: [vacancy_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "claims_vacancy_id_foreign")
  department_logs                                  department_logs[]
  employee_ssn_requests                            employee_ssn_requests[]
  fines                                            fines[]
  ms_cards                                         ms_cards[]
  ms_logs                                          ms_logs[]
  ms_requests                                      ms_requests[]
  sub_claims                                       sub_claims[]
  tax_requests                                     tax_requests[]

  @@index([eaeu_employee_family_member_id], map: "claims_eaeu_employee_family_member_id_foreign")
  @@index([eaeu_employee_id], map: "claims_eaeu_employee_id_foreign")
  @@index([employee_id], map: "claims_employee_id_foreign")
  @@index([in_progress_vacancy_id], map: "claims_in_progress_vacancy_id_foreign")
  @@index([ms_employee_id], map: "claims_ms_employee_id_foreign")
  @@index([ms_from_id], map: "claims_ms_from_id_foreign")
  @@index([ms_to_id], map: "claims_ms_to_id_foreign")
  @@index([user_id], map: "claims_user_id_foreign")
  @@index([vacancy_id], map: "claims_vacancy_id_foreign")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model companies {
  id                    BigInt                  @id @default(autoincrement()) @db.UnsignedBigInt
  legal_type_id         BigInt?                 @db.UnsignedBigInt
  tin                   String?                 @unique(map: "companies_tin_unique") @db.VarChar(255)
  name                  String                  @db.VarChar(255)
  type                  companies_type          @default(legal_person)
  address               String?                 @db.VarChar(255)
  actual_address        String?                 @db.VarChar(255)
  email                 String                  @db.VarChar(255)
  telephone             String                  @db.VarChar(255)
  created_at            DateTime?               @db.Timestamp(0)
  updated_at            DateTime?               @db.Timestamp(0)
  legal_types           legal_types?            @relation(fields: [legal_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "companies_legal_type_id_foreign")
  company_user          company_user[]          @ignore
  confidant_invitations confidant_invitations[]
  in_progress_vacancies in_progress_vacancies[]
  vacancies             vacancies[]
  vacancy_deadlines     vacancy_deadlines[]

  @@index([legal_type_id], map: "companies_legal_type_id_foreign")
}

model company_info_logs {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  data       String    @db.Text
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model company_user {
  user_id     BigInt              @db.UnsignedBigInt
  company_id  BigInt              @db.UnsignedBigInt
  type        company_user_type
  status      company_user_status @default(pending)
  position    String              @db.VarChar(255)
  certificate String?             @db.Text
  companies   companies           @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "company_user_company_id_foreign")
  users       users               @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "company_user_user_id_foreign")

  @@index([company_id], map: "company_user_company_id_foreign")
  @@index([user_id], map: "company_user_user_id_foreign")
  @@ignore
}

model confidant_invitations {
  id         BigInt                       @id @default(autoincrement()) @db.UnsignedBigInt
  company_id BigInt                       @db.UnsignedBigInt
  email      String                       @db.VarChar(255)
  status     confidant_invitations_status @default(pending)
  created_at DateTime?                    @db.Timestamp(0)
  updated_at DateTime?                    @db.Timestamp(0)
  companies  companies                    @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "confidant_invitations_company_id_foreign")

  @@index([company_id], map: "confidant_invitations_company_id_foreign")
}

model contact_us_contents {
  id              BigInt  @id @default(autoincrement()) @db.UnsignedBigInt
  telephone       String  @db.VarChar(255)
  email           String  @db.VarChar(255)
  longitude       String  @db.VarChar(255)
  latitude        String  @db.VarChar(255)
  support_text_am String  @db.VarChar(255)
  support_text_en String  @db.VarChar(255)
  support_text_ru String  @db.VarChar(255)
  address_am      String  @db.VarChar(255)
  address_en      String  @db.VarChar(255)
  address_ru      String  @db.VarChar(255)
  facebook_url    String? @db.VarChar(255)
  youtube_url     String? @db.VarChar(255)
  linkedin_url    String? @db.VarChar(255)
}

model countries {
  id                                               BigInt                                 @id @default(autoincrement()) @db.UnsignedBigInt
  name_en                                          String                                 @unique(map: "countries_name_en_unique") @db.VarChar(255)
  name_am                                          String?                                @unique(map: "countries_name_am_unique") @db.VarChar(255)
  name_ru                                          String?                                @unique(map: "countries_name_ru_unique") @db.VarChar(255)
  alpha_2                                          String?                                @db.VarChar(255)
  alpha_3                                          String?                                @db.VarChar(255)
  numeric                                          Int?
  arm_short                                        String?                                @db.VarChar(255)
  abbreviation_eng                                 String?                                @db.VarChar(255)
  abbreviation_arm                                 String?                                @db.VarChar(255)
  abbreviation_ru                                  String?                                @db.VarChar(255)
  full_name_en                                     String?                                @db.VarChar(255)
  full_name_am                                     String?                                @db.VarChar(255)
  full_name_ru                                     String?                                @db.VarChar(255)
  status                                           Boolean                                @default(true)
  eaeu                                             Boolean                                @default(false)
  need_visa                                        Boolean                                @default(false)
  duration_of_stay_days                            Int?
  eaeu_employee_family_members                     eaeu_employee_family_members[]
  eaeu_employees                                   eaeu_employees[]
  employees_employees_actual_country_idTocountries employees[]                            @relation("employees_actual_country_idTocountries")
  employees_employees_citizenship_idTocountries    employees[]                            @relation("employees_citizenship_idTocountries")
  not_wp_foreigners                                not_wp_foreigners[]
  passive_eaeu_employee_family_members             passive_eaeu_employee_family_members[]
}

model department_logs {
  id           BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  claim_id     BigInt     @db.UnsignedBigInt
  user_id      BigInt?    @db.UnsignedBigInt
  structure_id BigInt     @db.UnsignedBigInt
  status       String     @db.VarChar(255)
  path         String?    @db.VarChar(255)
  comment      String?    @db.VarChar(255)
  created_at   DateTime?  @db.Timestamp(0)
  updated_at   DateTime?  @db.Timestamp(0)
  claims       claims     @relation(fields: [claim_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "department_logs_claim_id_foreign")
  structures   structures @relation(fields: [structure_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "department_logs_structure_id_foreign")
  users        users?     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "department_logs_user_id_foreign")

  @@index([claim_id], map: "department_logs_claim_id_foreign")
  @@index([structure_id], map: "department_logs_structure_id_foreign")
  @@index([user_id], map: "department_logs_user_id_foreign")
}

model departments {
  id           BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  structure_id BigInt     @db.UnsignedBigInt
  name         String     @db.VarChar(255)
  structures   structures @relation(fields: [structure_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "departments_structure_id_foreign")
  users        users[]

  @@index([structure_id], map: "departments_structure_id_foreign")
}

model eaeu_employee_card_extension_request_deadlines {
  id                                      BigInt                                @id @default(autoincrement()) @db.UnsignedBigInt
  structure_id                            BigInt                                @db.UnsignedBigInt
  eaeu_employee_card_extension_request_id BigInt                                @db.UnsignedBigInt
  deadline                                DateTime                              @db.DateTime(0)
  is_active                               Boolean                               @default(true)
  created_at                              DateTime?                             @db.Timestamp(0)
  updated_at                              DateTime?                             @db.Timestamp(0)
  eaeu_employee_card_extension_requests   eaeu_employee_card_extension_requests @relation(fields: [eaeu_employee_card_extension_request_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "eecerd_ecer_id")
  structures                              structures                            @relation(fields: [structure_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "eecerd_s_id")

  @@index([eaeu_employee_card_extension_request_id], map: "eecerd_ecer_id")
  @@index([structure_id], map: "eecerd_s_id")
}

model eaeu_employee_card_extension_requests {
  id                                             BigInt                                           @id @default(autoincrement()) @db.UnsignedBigInt
  eaeu_employee_id                               BigInt                                           @db.UnsignedBigInt
  ms_card_id                                     BigInt                                           @db.UnsignedBigInt
  comment                                        String?                                          @db.VarChar(255)
  status                                         eaeu_employee_card_extension_requests_status     @default(pending)
  created_at                                     DateTime?                                        @db.Timestamp(0)
  updated_at                                     DateTime?                                        @db.Timestamp(0)
  eaeu_employee_card_extension_request_deadlines eaeu_employee_card_extension_request_deadlines[]
  eaeu_employees                                 eaeu_employees                                   @relation(fields: [eaeu_employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "eecer_e_id")
  ms_cards                                       ms_cards                                         @relation(fields: [ms_card_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "eecer_mc_id")

  @@index([eaeu_employee_id], map: "eecer_e_id")
  @@index([ms_card_id], map: "eecer_mc_id")
}

model eaeu_employee_card_recovery_requests {
  id               BigInt                                      @id @default(autoincrement()) @db.UnsignedBigInt
  eaeu_employee_id BigInt                                      @db.UnsignedBigInt
  ms_card_id       BigInt                                      @db.UnsignedBigInt
  comment          String?                                     @db.VarChar(255)
  status           eaeu_employee_card_recovery_requests_status @default(pending)
  created_at       DateTime?                                   @db.Timestamp(0)
  updated_at       DateTime?                                   @db.Timestamp(0)
  eaeu_employees   eaeu_employees                              @relation(fields: [eaeu_employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "eecrr_ee_id")
  ms_cards         ms_cards                                    @relation(fields: [ms_card_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "eecrr_mc_id")

  @@index([eaeu_employee_id], map: "eecrr_ee_id")
  @@index([ms_card_id], map: "eecrr_mc_id")
}

model eaeu_employee_connect_family_members {
  id                             BigInt                                    @id @default(autoincrement()) @db.UnsignedBigInt
  eaeu_employee_id               BigInt                                    @db.UnsignedBigInt
  eaeu_employee_family_member_id BigInt                                    @db.UnsignedBigInt
  from                           eaeu_employee_connect_family_members_from
  created_at                     DateTime?                                 @db.Timestamp(0)
  updated_at                     DateTime?                                 @db.Timestamp(0)
}

model eaeu_employee_deadlines {
  id               BigInt         @id @default(autoincrement()) @db.UnsignedBigInt
  structure_id     BigInt?        @db.UnsignedBigInt
  eaeu_employee_id BigInt         @db.UnsignedBigInt
  deadline         DateTime       @db.DateTime(0)
  is_active        Boolean        @default(true)
  created_at       DateTime?      @db.Timestamp(0)
  updated_at       DateTime?      @db.Timestamp(0)
  eaeu_employees   eaeu_employees @relation(fields: [eaeu_employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "eaeu_employee_deadlines_eaeu_employee_id_foreign")
  structures       structures?    @relation(fields: [structure_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "eaeu_employee_deadlines_structure_id_foreign")

  @@index([eaeu_employee_id], map: "eaeu_employee_deadlines_eaeu_employee_id_foreign")
  @@index([structure_id], map: "eaeu_employee_deadlines_structure_id_foreign")
}

model eaeu_employee_family_member_card_extension_request_deadlines {
  id                                                    BigInt                                              @id @default(autoincrement()) @db.UnsignedBigInt
  structure_id                                          BigInt                                              @db.UnsignedBigInt
  eaeu_employee_family_member_card_extension_request_id BigInt                                              @db.UnsignedBigInt
  deadline                                              DateTime                                            @db.DateTime(0)
  is_active                                             Boolean                                             @default(true)
  created_at                                            DateTime?                                           @db.Timestamp(0)
  updated_at                                            DateTime?                                           @db.Timestamp(0)
  eaeu_employee_family_member_card_extension_requests   eaeu_employee_family_member_card_extension_requests @relation(fields: [eaeu_employee_family_member_card_extension_request_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "eefmcerd_eefmcer_id")
  structures                                            structures                                          @relation(fields: [structure_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "eefmcerd_s_id")

  @@index([eaeu_employee_family_member_card_extension_request_id], map: "eefmcerd_eefmcer_id")
  @@index([structure_id], map: "eefmcerd_s_id")
}

model eaeu_employee_family_member_card_extension_requests {
  id                                                           BigInt                                                         @id @default(autoincrement()) @db.UnsignedBigInt
  eaeu_employee_family_member_id                               BigInt                                                         @db.UnsignedBigInt
  ms_card_id                                                   BigInt                                                         @db.UnsignedBigInt
  comment                                                      String?                                                        @db.VarChar(255)
  status                                                       eaeu_employee_family_member_card_extension_requests_status     @default(pending)
  created_at                                                   DateTime?                                                      @db.Timestamp(0)
  updated_at                                                   DateTime?                                                      @db.Timestamp(0)
  eaeu_employee_family_member_card_extension_request_deadlines eaeu_employee_family_member_card_extension_request_deadlines[]
  eaeu_employee_family_members                                 eaeu_employee_family_members                                   @relation(fields: [eaeu_employee_family_member_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "eefmcer_eefm_id")
  ms_cards                                                     ms_cards                                                       @relation(fields: [ms_card_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "eefmcer_mc_id")

  @@index([eaeu_employee_family_member_id], map: "eefmcer_eefm_id")
  @@index([ms_card_id], map: "eefmcer_mc_id")
}

model eaeu_employee_family_member_card_recovery_requests {
  id                             BigInt                                                    @id @default(autoincrement()) @db.UnsignedBigInt
  eaeu_employee_family_member_id BigInt                                                    @db.UnsignedBigInt
  ms_card_id                     BigInt                                                    @db.UnsignedBigInt
  comment                        String?                                                   @db.VarChar(255)
  status                         eaeu_employee_family_member_card_recovery_requests_status @default(pending)
  created_at                     DateTime?                                                 @db.Timestamp(0)
  updated_at                     DateTime?                                                 @db.Timestamp(0)
  eaeu_employee_family_members   eaeu_employee_family_members                              @relation(fields: [eaeu_employee_family_member_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "eefmcrr_eefm_id")
  ms_cards                       ms_cards                                                  @relation(fields: [ms_card_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "eefmcrr_mc_id")

  @@index([eaeu_employee_family_member_id], map: "eefmcrr_eefm_id")
  @@index([ms_card_id], map: "eefmcrr_mc_id")
}

model eaeu_employee_family_member_deadlines {
  id                             BigInt                       @id @default(autoincrement()) @db.UnsignedBigInt
  structure_id                   BigInt?                      @db.UnsignedBigInt
  eaeu_employee_family_member_id BigInt                       @db.UnsignedBigInt
  deadline                       DateTime                     @db.DateTime(0)
  is_active                      Boolean                      @default(true)
  created_at                     DateTime?                    @db.Timestamp(0)
  updated_at                     DateTime?                    @db.Timestamp(0)
  eaeu_employee_family_members   eaeu_employee_family_members @relation(fields: [eaeu_employee_family_member_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "eaeu_employee_family_member_deadlines_eefm_id")
  structures                     structures?                  @relation(fields: [structure_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "eaeu_employee_family_member_deadlines_structure_id_foreign")

  @@index([eaeu_employee_family_member_id], map: "eaeu_employee_family_member_deadlines_eefm_id")
  @@index([structure_id], map: "eaeu_employee_family_member_deadlines_structure_id_foreign")
}

model eaeu_employee_family_member_files {
  id                             BigInt                       @id @default(autoincrement()) @db.UnsignedBigInt
  eaeu_employee_family_member_id BigInt                       @db.UnsignedBigInt
  type                           String                       @db.VarChar(255)
  path                           String                       @db.VarChar(255)
  active                         Boolean                      @default(true)
  eaeu_employee_family_members   eaeu_employee_family_members @relation(fields: [eaeu_employee_family_member_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "eefmf_eefm_id")

  @@index([eaeu_employee_family_member_id], map: "eefmf_eefm_id")
}

model eaeu_employee_family_member_update_logs {
  id                             BigInt                       @id @default(autoincrement()) @db.UnsignedBigInt
  eaeu_employee_family_member_id BigInt                       @db.UnsignedBigInt
  data                           Json
  created_at                     DateTime?                    @db.Timestamp(0)
  updated_at                     DateTime?                    @db.Timestamp(0)
  eaeu_employee_family_members   eaeu_employee_family_members @relation(fields: [eaeu_employee_family_member_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "eefmul_eefm_id")

  @@index([eaeu_employee_family_member_id], map: "eefmul_eefm_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model eaeu_employee_family_members {
  id                                                                     BigInt                                                @id @default(autoincrement()) @db.UnsignedBigInt
  user_id                                                                BigInt                                                @db.UnsignedBigInt
  status                                                                 String?                                               @default("active") @db.VarChar(255)
  ms_employee_id                                                         BigInt?                                               @db.UnsignedBigInt
  ms_from_id                                                             BigInt?                                               @db.UnsignedBigInt
  ms_to_id                                                               BigInt?                                               @db.UnsignedBigInt
  first_name_am                                                          String                                                @db.VarChar(255)
  last_name_am                                                           String                                                @db.VarChar(255)
  patronymic_am                                                          String?                                               @db.VarChar(255)
  first_name_en                                                          String?                                               @db.VarChar(255)
  last_name_en                                                           String?                                               @db.VarChar(255)
  patronymic_en                                                          String?                                               @db.VarChar(255)
  first_name_ru                                                          String?                                               @db.VarChar(255)
  last_name_ru                                                           String?                                               @db.VarChar(255)
  patronymic_ru                                                          String?                                               @db.VarChar(255)
  email                                                                  String                                                @db.VarChar(255)
  citizenship_id                                                         BigInt                                                @db.UnsignedBigInt
  birthday_year                                                          String                                                @db.VarChar(255)
  birthday_month                                                         String                                                @db.VarChar(255)
  birthday_day                                                           String                                                @db.VarChar(255)
  gender_id                                                              BigInt?                                               @db.UnsignedBigInt
  passport_number                                                        String?                                               @db.VarChar(255)
  passport_issued                                                        DateTime?                                             @db.Date
  passport_valid                                                         DateTime?                                             @db.Date
  ssn                                                                    String?                                               @unique(map: "eaeu_employee_family_members_ssn_unique") @db.VarChar(255)
  actual_address                                                         String                                                @db.VarChar(255)
  address                                                                String?                                               @db.VarChar(255)
  family_member_id                                                       BigInt?                                               @db.UnsignedBigInt
  needs_certificate                                                      Boolean                                               @default(true)
  created_at                                                             DateTime?                                             @db.Timestamp(0)
  updated_at                                                             DateTime?                                             @db.Timestamp(0)
  telephone                                                              String?                                               @db.VarChar(255)
  claims                                                                 claims[]
  eaeu_employee_family_member_card_extension_requests                    eaeu_employee_family_member_card_extension_requests[]
  eaeu_employee_family_member_card_recovery_requests                     eaeu_employee_family_member_card_recovery_requests[]
  eaeu_employee_family_member_deadlines                                  eaeu_employee_family_member_deadlines[]
  eaeu_employee_family_member_files                                      eaeu_employee_family_member_files[]
  eaeu_employee_family_member_update_logs                                eaeu_employee_family_member_update_logs[]
  countries                                                              countries                                             @relation(fields: [citizenship_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "eaeu_employee_family_members_citizenship_id_foreign")
  family_members                                                         family_members?                                       @relation(fields: [family_member_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "eaeu_employee_family_members_family_member_id_foreign")
  genders                                                                genders?                                              @relation(fields: [gender_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "eaeu_employee_family_members_gender_id_foreign")
  ms_employees_eaeu_employee_family_members_ms_employee_idToms_employees ms_employees?                                         @relation("eaeu_employee_family_members_ms_employee_idToms_employees", fields: [ms_employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "eaeu_employee_family_members_ms_employee_id_foreign")
  ms_employees_eaeu_employee_family_members_ms_from_idToms_employees     ms_employees?                                         @relation("eaeu_employee_family_members_ms_from_idToms_employees", fields: [ms_from_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "eaeu_employee_family_members_ms_from_id_foreign")
  ms_employees_eaeu_employee_family_members_ms_to_idToms_employees       ms_employees?                                         @relation("eaeu_employee_family_members_ms_to_idToms_employees", fields: [ms_to_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "eaeu_employee_family_members_ms_to_id_foreign")
  users                                                                  users                                                 @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "eaeu_employee_family_members_user_id_foreign")
  fines                                                                  fines[]
  found_arm_citizens                                                     found_arm_citizens[]
  ic_request_logs                                                        ic_request_logs[]
  passive_eaeu_employee_family_members                                   passive_eaeu_employee_family_members[]
  sekt_requests                                                          sekt_requests[]
  sub_claims                                                             sub_claims[]
  terminate_arm_citizen_logs                                             terminate_arm_citizen_logs[]

  @@index([citizenship_id], map: "eaeu_employee_family_members_citizenship_id_foreign")
  @@index([family_member_id], map: "eaeu_employee_family_members_family_member_id_foreign")
  @@index([gender_id], map: "eaeu_employee_family_members_gender_id_foreign")
  @@index([ms_employee_id], map: "eaeu_employee_family_members_ms_employee_id_foreign")
  @@index([ms_from_id], map: "eaeu_employee_family_members_ms_from_id_foreign")
  @@index([ms_to_id], map: "eaeu_employee_family_members_ms_to_id_foreign")
  @@index([user_id], map: "eaeu_employee_family_members_user_id_foreign")
}

model eaeu_employee_files {
  id               BigInt         @id @default(autoincrement()) @db.UnsignedBigInt
  eaeu_employee_id BigInt         @db.UnsignedBigInt
  type             String         @db.VarChar(255)
  path             String         @db.VarChar(255)
  active           Boolean        @default(true)
  eaeu_employees   eaeu_employees @relation(fields: [eaeu_employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "eaeu_employee_files_eaeu_employee_id_foreign")

  @@index([eaeu_employee_id], map: "eaeu_employee_files_eaeu_employee_id_foreign")
}

model eaeu_employee_update_logs {
  id               BigInt         @id @default(autoincrement()) @db.UnsignedBigInt
  user_id          BigInt         @db.UnsignedBigInt
  eaeu_employee_id BigInt         @db.UnsignedBigInt
  data             Json
  created_at       DateTime?      @db.Timestamp(0)
  updated_at       DateTime?      @db.Timestamp(0)
  eaeu_employees   eaeu_employees @relation(fields: [eaeu_employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "eaeu_employee_update_logs_eaeu_employee_id_foreign")
  users            users          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "eaeu_employee_update_logs_user_id_foreign")

  @@index([eaeu_employee_id], map: "eaeu_employee_update_logs_eaeu_employee_id_foreign")
  @@index([user_id], map: "eaeu_employee_update_logs_user_id_foreign")
}

model eaeu_employees {
  id                                                       BigInt                                  @id @default(autoincrement()) @db.UnsignedBigInt
  user_id                                                  BigInt                                  @db.UnsignedBigInt
  status                                                   String?                                 @default("active") @db.VarChar(255)
  ms_employee_id                                           BigInt?                                 @db.UnsignedBigInt
  ms_from_id                                               BigInt?                                 @db.UnsignedBigInt
  ms_to_id                                                 BigInt?                                 @db.UnsignedBigInt
  citizenship_id                                           BigInt                                  @db.UnsignedBigInt
  birthday_year                                            String                                  @db.VarChar(255)
  birthday_month                                           String                                  @db.VarChar(255)
  birthday_day                                             String                                  @db.VarChar(255)
  agreement_start_date                                     DateTime                                @db.Date
  agreement_end_date                                       String?                                 @db.VarChar(255)
  needs_certificate                                        Boolean
  passport_number                                          String                                  @db.VarChar(255)
  passport_issued                                          DateTime?                               @db.Date
  passport_valid                                           DateTime?                               @db.Date
  actual_address                                           String                                  @db.VarChar(255)
  address                                                  String?                                 @db.VarChar(255)
  claims                                                   claims[]
  eaeu_employee_card_extension_requests                    eaeu_employee_card_extension_requests[]
  eaeu_employee_card_recovery_requests                     eaeu_employee_card_recovery_requests[]
  eaeu_employee_deadlines                                  eaeu_employee_deadlines[]
  eaeu_employee_files                                      eaeu_employee_files[]
  eaeu_employee_update_logs                                eaeu_employee_update_logs[]
  countries                                                countries                               @relation(fields: [citizenship_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "eaeu_employees_citizenship_id_foreign")
  ms_employees_eaeu_employees_ms_employee_idToms_employees ms_employees?                           @relation("eaeu_employees_ms_employee_idToms_employees", fields: [ms_employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "eaeu_employees_ms_employee_id_foreign")
  ms_employees_eaeu_employees_ms_from_idToms_employees     ms_employees?                           @relation("eaeu_employees_ms_from_idToms_employees", fields: [ms_from_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "eaeu_employees_ms_from_id_foreign")
  ms_employees_eaeu_employees_ms_to_idToms_employees       ms_employees?                           @relation("eaeu_employees_ms_to_idToms_employees", fields: [ms_to_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "eaeu_employees_ms_to_id_foreign")
  users                                                    users                                   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "eaeu_employees_user_id_foreign")
  fines                                                    fines[]
  found_arm_citizens                                       found_arm_citizens[]
  ic_request_logs                                          ic_request_logs[]
  sekt_requests                                            sekt_requests[]
  sub_claims                                               sub_claims[]
  tax_requests                                             tax_requests[]
  terminate_arm_citizen_logs                               terminate_arm_citizen_logs[]

  @@index([citizenship_id], map: "eaeu_employees_citizenship_id_foreign")
  @@index([ms_employee_id], map: "eaeu_employees_ms_employee_id_foreign")
  @@index([ms_from_id], map: "eaeu_employees_ms_from_id_foreign")
  @@index([ms_to_id], map: "eaeu_employees_ms_to_id_foreign")
  @@index([user_id], map: "eaeu_employees_user_id_foreign")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model education_level_position_code {
  education_level_id BigInt           @db.UnsignedBigInt
  position_code_id   BigInt           @db.UnsignedBigInt
  education_levels   education_levels @relation(fields: [education_level_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "education_level_position_code_education_level_id_foreign")
  position_codes     position_codes   @relation(fields: [position_code_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "education_level_position_code_position_code_id_foreign")

  @@index([education_level_id], map: "education_level_position_code_education_level_id_foreign")
  @@index([position_code_id], map: "education_level_position_code_position_code_id_foreign")
  @@ignore
}

model education_levels {
  id                            BigInt                          @id @default(autoincrement()) @db.UnsignedBigInt
  name_am                       String                          @unique(map: "education_levels_name_am_unique") @db.VarChar(255)
  name_en                       String                          @unique(map: "education_levels_name_en_unique") @db.VarChar(255)
  name_ru                       String                          @unique(map: "education_levels_name_ru_unique") @db.VarChar(255)
  education_level_position_code education_level_position_code[] @ignore
  employees                     employees[]
  position_codes                position_codes[]
  vacancies                     vacancies[]
}

model ejbc_request_log {
  id              BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id         BigInt
  card_id         BigInt
  response_status Int?
  response_body   String?   @db.MediumText
  create_pki      Boolean   @default(false)
  revoke_pki      Boolean   @default(false)
  created_at      DateTime? @db.Timestamp(0)
  updated_at      DateTime? @db.Timestamp(0)
}

model employee_card_extension_request_deadlines {
  id                                 BigInt                           @id @default(autoincrement()) @db.UnsignedBigInt
  structure_id                       BigInt                           @db.UnsignedBigInt
  employee_card_extension_request_id BigInt                           @db.UnsignedBigInt
  deadline                           DateTime                         @db.DateTime(0)
  is_active                          Boolean                          @default(true)
  created_at                         DateTime?                        @db.Timestamp(0)
  updated_at                         DateTime?                        @db.Timestamp(0)
  employee_card_extension_requests   employee_card_extension_requests @relation(fields: [employee_card_extension_request_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ecerd_ecer_id")
  structures                         structures                       @relation(fields: [structure_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ecerd_s_id")

  @@index([employee_card_extension_request_id], map: "ecerd_ecer_id")
  @@index([structure_id], map: "ecerd_s_id")
}

model employee_card_extension_requests {
  id                                        BigInt                                      @id @default(autoincrement()) @db.UnsignedBigInt
  employee_id                               BigInt                                      @db.UnsignedBigInt
  ms_card_id                                BigInt                                      @db.UnsignedBigInt
  vacancy_id                                BigInt?                                     @db.UnsignedBigInt
  in_progress_vacancy_id                    BigInt?                                     @db.UnsignedBigInt
  comment                                   String?                                     @db.VarChar(255)
  status                                    employee_card_extension_requests_status     @default(pending)
  nss_answered                              Boolean                                     @default(false)
  police_answered                           Boolean                                     @default(false)
  created_at                                DateTime?                                   @db.Timestamp(0)
  updated_at                                DateTime?                                   @db.Timestamp(0)
  employee_card_extension_request_deadlines employee_card_extension_request_deadlines[]
  employees                                 employees                                   @relation(fields: [employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ecer_e_id")
  in_progress_vacancies                     in_progress_vacancies?                      @relation(fields: [in_progress_vacancy_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ecer_ipv_id")
  ms_cards                                  ms_cards                                    @relation(fields: [ms_card_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ecer_mc_id")
  vacancies                                 vacancies?                                  @relation(fields: [vacancy_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ecer_v_id")

  @@index([employee_id], map: "ecer_e_id")
  @@index([in_progress_vacancy_id], map: "ecer_ipv_id")
  @@index([ms_card_id], map: "ecer_mc_id")
  @@index([vacancy_id], map: "ecer_v_id")
}

model employee_card_recovery_requests {
  id           BigInt                                 @id @default(autoincrement()) @db.UnsignedBigInt
  employee_id  BigInt                                 @db.UnsignedBigInt
  ms_card_id   BigInt                                 @db.UnsignedBigInt
  payment_file String?                                @db.VarChar(255)
  comment      String?                                @db.VarChar(255)
  status       employee_card_recovery_requests_status @default(pending)
  created_at   DateTime?                              @db.Timestamp(0)
  updated_at   DateTime?                              @db.Timestamp(0)
  employees    employees                              @relation(fields: [employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ecrr_e_id")
  ms_cards     ms_cards                               @relation(fields: [ms_card_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ecrr_mc_id")

  @@index([employee_id], map: "ecrr_e_id")
  @@index([ms_card_id], map: "ecrr_mc_id")
}

model employee_files {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  employee_id BigInt    @db.UnsignedBigInt
  type        String    @db.VarChar(255)
  path        String    @db.VarChar(255)
  active      Boolean   @default(true)
  employees   employees @relation(fields: [employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "employee_files_employee_id_foreign")

  @@index([employee_id], map: "employee_files_employee_id_foreign")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model employee_ssn_requests {
  id                     BigInt                       @id @default(autoincrement()) @db.UnsignedBigInt
  user_id                BigInt?                      @db.UnsignedBigInt
  employee_id            BigInt                       @db.UnsignedBigInt
  claim_id               BigInt?                      @db.UnsignedBigInt
  vacancy_id             BigInt?                      @db.UnsignedBigInt
  in_progress_vacancy_id BigInt?                      @db.UnsignedBigInt
  ssn                    String?                      @db.VarChar(255)
  ssn_document           String?                      @db.Text
  status                 employee_ssn_requests_status @default(pending)
  created_at             DateTime?                    @db.Timestamp(0)
  updated_at             DateTime?                    @db.Timestamp(0)
  claims                 claims?                      @relation(fields: [claim_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "employee_ssn_requests_claim_id_foreign")
  users                  users?                       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "employee_ssn_requests_user_id_foreign")

  @@index([claim_id], map: "employee_ssn_requests_claim_id_foreign")
  @@index([user_id], map: "employee_ssn_requests_user_id_foreign")
}

model employee_update_logs {
  id                     BigInt                 @id @default(autoincrement()) @db.UnsignedBigInt
  user_id                BigInt                 @db.UnsignedBigInt
  employee_id            BigInt                 @db.UnsignedBigInt
  vacancy_id             BigInt?                @db.UnsignedBigInt
  in_progress_vacancy_id BigInt?                @db.UnsignedBigInt
  data                   Json
  created_at             DateTime?              @db.Timestamp(0)
  updated_at             DateTime?              @db.Timestamp(0)
  employees              employees              @relation(fields: [employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "employee_update_logs_employee_id_foreign")
  in_progress_vacancies  in_progress_vacancies? @relation(fields: [in_progress_vacancy_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "employee_update_logs_in_progress_vacancy_id_foreign")
  users                  users                  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "employee_update_logs_user_id_foreign")
  vacancies              vacancies?             @relation(fields: [vacancy_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "employee_update_logs_vacancy_id_foreign")

  @@index([employee_id], map: "employee_update_logs_employee_id_foreign")
  @@index([in_progress_vacancy_id], map: "employee_update_logs_in_progress_vacancy_id_foreign")
  @@index([user_id], map: "employee_update_logs_user_id_foreign")
  @@index([vacancy_id], map: "employee_update_logs_vacancy_id_foreign")
}

model employees {
  id                                               BigInt                             @id @default(autoincrement()) @db.UnsignedBigInt
  user_id                                          BigInt                             @db.UnsignedBigInt
  birthday_year                                    String                             @db.VarChar(255)
  birthday_month                                   String                             @db.VarChar(255)
  birthday_day                                     String                             @db.VarChar(255)
  citizenship_id                                   BigInt?                            @db.UnsignedBigInt
  actual_country_id                                BigInt?                            @db.UnsignedBigInt
  full_address                                     String                             @db.VarChar(255)
  education_level_id                               BigInt?                            @db.UnsignedBigInt
  payment_done                                     Boolean                            @default(false)
  no_payment                                       Boolean                            @default(false)
  no_payment_comment                               String?                            @db.VarChar(255)
  passport_number                                  String                             @db.VarChar(255)
  passport_issued                                  DateTime?                          @db.Date
  passport_valid                                   DateTime?                          @db.Date
  created_at                                       DateTime?                          @db.Timestamp(0)
  updated_at                                       DateTime?                          @db.Timestamp(0)
  status                                           String?                            @default("active") @db.VarChar(255)
  claims                                           claims[]
  employee_card_extension_requests                 employee_card_extension_requests[]
  employee_card_recovery_requests                  employee_card_recovery_requests[]
  employee_files                                   employee_files[]
  employee_update_logs                             employee_update_logs[]
  countries_employees_actual_country_idTocountries countries?                         @relation("employees_actual_country_idTocountries", fields: [actual_country_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "employees_actual_country_id_foreign")
  countries_employees_citizenship_idTocountries    countries?                         @relation("employees_citizenship_idTocountries", fields: [citizenship_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "employees_citizenship_id_foreign")
  education_levels                                 education_levels?                  @relation(fields: [education_level_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "employees_education_level_id_foreign")
  users                                            users                              @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "employees_user_id_foreign")
  fines                                            fines[]
  found_arm_citizens                               found_arm_citizens[]
  ic_request_logs                                  ic_request_logs[]
  in_progress_vacancies                            in_progress_vacancies[]
  sekt_requests                                    sekt_requests[]
  sub_claims                                       sub_claims[]
  tax_requests                                     tax_requests[]
  terminate_arm_citizen_logs                       terminate_arm_citizen_logs[]
  vacancies                                        vacancies[]
  vacancy_update_logs                              vacancy_update_logs[]

  @@index([actual_country_id], map: "employees_actual_country_id_foreign")
  @@index([citizenship_id], map: "employees_citizenship_id_foreign")
  @@index([education_level_id], map: "employees_education_level_id_foreign")
  @@index([user_id], map: "employees_user_id_foreign")
}

model excepted_professions {
  id               BigInt      @id @default(autoincrement()) @db.UnsignedBigInt
  name_am          String      @db.Text
  name_en          String?     @db.Text
  name_ru          String?     @db.Text
  structure_id     BigInt?     @db.UnsignedBigInt
  needs_conclusion Boolean?
  is_active        Boolean?
  resident_permit  Boolean     @default(false)
  structures       structures? @relation(fields: [structure_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "excepted_professions_structure_id_foreign")
  vacancies        vacancies[]

  @@index([structure_id], map: "excepted_professions_structure_id_foreign")
}

model exception_certification_documents {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  vacancy_id BigInt    @db.UnsignedBigInt
  document   String    @db.VarChar(255)
  vacancies  vacancies @relation(fields: [vacancy_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "exception_certification_documents_vacancy_id_foreign")

  @@index([vacancy_id], map: "exception_certification_documents_vacancy_id_foreign")
}

model failed_jobs {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  uuid       String   @unique(map: "failed_jobs_uuid_unique") @db.VarChar(255)
  connection String   @db.Text
  queue      String   @db.Text
  payload    String   @db.LongText
  exception  String   @db.LongText
  failed_at  DateTime @default(now()) @db.Timestamp(0)
}

model family_members {
  id                                   BigInt                                 @id @default(autoincrement()) @db.UnsignedBigInt
  name_en                              String                                 @db.VarChar(255)
  name_am                              String                                 @db.VarChar(255)
  name_ru                              String                                 @db.VarChar(255)
  created_at                           DateTime?                              @db.Timestamp(0)
  updated_at                           DateTime?                              @db.Timestamp(0)
  eaeu_employee_family_members         eaeu_employee_family_members[]
  passive_eaeu_employee_family_members passive_eaeu_employee_family_members[]
}

model fine_comments {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id    BigInt    @db.UnsignedBigInt
  fine_id    BigInt    @db.UnsignedBigInt
  comment    String    @db.Text
  path       String?   @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  fines      fines     @relation(fields: [fine_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fine_comments_fine_id_foreign")
  users      users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fine_comments_user_id_foreign")

  @@index([fine_id], map: "fine_comments_fine_id_foreign")
  @@index([user_id], map: "fine_comments_user_id_foreign")
}

model fine_logs {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  fine_id     BigInt    @db.UnsignedBigInt
  user_id     BigInt    @db.UnsignedBigInt
  from_status String?   @db.VarChar(20)
  to_status   String    @db.VarChar(20)
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
  fines       fines     @relation(fields: [fine_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fine_logs_fine_id_foreign")
  users       users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fine_logs_user_id_foreign")

  @@index([fine_id], map: "fine_logs_fine_id_foreign")
  @@index([user_id], map: "fine_logs_user_id_foreign")
}

model fines {
  id                             BigInt                        @id @default(autoincrement()) @db.UnsignedBigInt
  user_id                        BigInt                        @db.UnsignedBigInt
  claim_id                       BigInt                        @db.UnsignedBigInt
  employee_id                    BigInt?                       @db.UnsignedBigInt
  eaeu_employee_id               BigInt?                       @db.UnsignedBigInt
  eaeu_employee_family_member_id BigInt?                       @db.UnsignedBigInt
  status                         String                        @default("pending") @db.VarChar(20)
  created_at                     DateTime?                     @db.Timestamp(0)
  updated_at                     DateTime?                     @db.Timestamp(0)
  fine_comments                  fine_comments[]
  fine_logs                      fine_logs[]
  claims                         claims                        @relation(fields: [claim_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fines_claim_id_foreign")
  eaeu_employee_family_members   eaeu_employee_family_members? @relation(fields: [eaeu_employee_family_member_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fines_eaeu_employee_family_member_id_foreign")
  eaeu_employees                 eaeu_employees?               @relation(fields: [eaeu_employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fines_eaeu_employee_id_foreign")
  employees                      employees?                    @relation(fields: [employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fines_employee_id_foreign")
  users                          users                         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fines_user_id_foreign")
  ms_requests                    ms_requests[]

  @@index([claim_id], map: "fines_claim_id_foreign")
  @@index([eaeu_employee_family_member_id], map: "fines_eaeu_employee_family_member_id_foreign")
  @@index([eaeu_employee_id], map: "fines_eaeu_employee_id_foreign")
  @@index([employee_id], map: "fines_employee_id_foreign")
  @@index([user_id], map: "fines_user_id_foreign")
}

model found_arm_citizens {
  id                             BigInt                        @id @default(autoincrement()) @db.UnsignedBigInt
  employee_id                    BigInt?                       @db.UnsignedBigInt
  eaeu_employee_id               BigInt?                       @db.UnsignedBigInt
  eaeu_employee_family_member_id BigInt?                       @db.UnsignedBigInt
  ssn                            String                        @db.VarChar(255)
  citizenship                    String?                       @db.Text
  document_number                String?                       @db.VarChar(255)
  nationality_name               String?                       @db.VarChar(255)
  first_name                     String?                       @db.VarChar(255)
  last_name                      String?                       @db.VarChar(255)
  passport_issuance_date         DateTime?                     @db.Date
  created_at                     DateTime?                     @db.Timestamp(0)
  updated_at                     DateTime?                     @db.Timestamp(0)
  eaeu_employee_family_members   eaeu_employee_family_members? @relation(fields: [eaeu_employee_family_member_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "found_arm_citizens_eaeu_employee_family_member_id_foreign")
  eaeu_employees                 eaeu_employees?               @relation(fields: [eaeu_employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "found_arm_citizens_eaeu_employee_id_foreign")
  employees                      employees?                    @relation(fields: [employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "found_arm_citizens_employee_id_foreign")

  @@index([eaeu_employee_family_member_id], map: "found_arm_citizens_eaeu_employee_family_member_id_foreign")
  @@index([eaeu_employee_id], map: "found_arm_citizens_eaeu_employee_id_foreign")
  @@index([employee_id], map: "found_arm_citizens_employee_id_foreign")
}

model frequently_asked_questions {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  question_am String    @db.Text
  question_en String    @db.Text
  question_ru String    @db.Text
  answer_am   String    @db.Text
  answer_en   String    @db.Text
  answer_ru   String    @db.Text
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
}

model genders {
  id                                   BigInt                                 @id @default(autoincrement()) @db.UnsignedBigInt
  name_en                              String                                 @db.VarChar(255)
  name_am                              String                                 @db.VarChar(255)
  name_ru                              String                                 @db.VarChar(255)
  code_en                              String                                 @db.VarChar(255)
  code_am                              String                                 @db.VarChar(255)
  code_ru                              String                                 @db.VarChar(255)
  created_at                           DateTime?                              @db.Timestamp(0)
  updated_at                           DateTime?                              @db.Timestamp(0)
  eaeu_employee_family_members         eaeu_employee_family_members[]
  ms_card_receipts                     ms_card_receipts[]
  not_wp_foreigners                    not_wp_foreigners[]
  passive_eaeu_employee_family_members passive_eaeu_employee_family_members[]
  users                                users[]
}

model holidays {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  date       DateTime @db.Date
  is_day_off Boolean  @default(true)
}

model ic_request_logs {
  id                             BigInt                        @id @default(autoincrement()) @db.UnsignedBigInt
  employee_id                    BigInt?                       @db.UnsignedBigInt
  eaeu_employee_id               BigInt?                       @db.UnsignedBigInt
  eaeu_employee_family_member_id BigInt?                       @db.UnsignedBigInt
  request                        String                        @db.Text
  response                       String?                       @db.Text
  judged                         Boolean                       @default(false)
  in_investigation               Boolean                       @default(false)
  created_at                     DateTime?                     @db.Timestamp(0)
  updated_at                     DateTime?                     @db.Timestamp(0)
  eaeu_employee_family_members   eaeu_employee_family_members? @relation(fields: [eaeu_employee_family_member_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ic_request_logs_eaeu_employee_family_member_id_foreign")
  eaeu_employees                 eaeu_employees?               @relation(fields: [eaeu_employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ic_request_logs_eaeu_employee_id_foreign")
  employees                      employees?                    @relation(fields: [employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ic_request_logs_employee_id_foreign")

  @@index([eaeu_employee_family_member_id], map: "ic_request_logs_eaeu_employee_family_member_id_foreign")
  @@index([eaeu_employee_id], map: "ic_request_logs_eaeu_employee_id_foreign")
  @@index([employee_id], map: "ic_request_logs_employee_id_foreign")
}

model in_progress_vacancies {
  id                                                              BigInt                                  @id @default(autoincrement()) @db.UnsignedBigInt
  company_id                                                      BigInt?                                 @db.UnsignedBigInt
  user_id                                                         BigInt?                                 @db.UnsignedBigInt
  employee_id                                                     BigInt?                                 @db.UnsignedBigInt
  ms_employee_id                                                  BigInt?                                 @db.UnsignedBigInt
  ms_from_id                                                      BigInt?                                 @db.UnsignedBigInt
  ms_to_id                                                        BigInt?                                 @db.UnsignedBigInt
  status                                                          in_progress_vacancies_status            @default(pending_foreigner)
  title                                                           String?                                 @db.VarChar(255)
  position_code_id                                                BigInt?                                 @db.UnsignedBigInt
  agreement_start_date                                            DateTime?                               @db.Date
  agreement_end_date                                              DateTime?                               @db.Date
  work_permit_issue_date                                          DateTime?                               @db.Date
  work_permit_number                                              String?                                 @db.VarChar(255)
  work_permit_photo                                               String?                                 @db.Text
  needs_status                                                    Boolean                                 @default(false)
  created_at                                                      DateTime?                               @db.Timestamp(0)
  updated_at                                                      DateTime?                               @db.Timestamp(0)
  claims                                                          claims[]
  employee_card_extension_requests                                employee_card_extension_requests[]
  employee_update_logs                                            employee_update_logs[]
  companies                                                       companies?                              @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "in_progress_vacancies_company_id_foreign")
  employees                                                       employees?                              @relation(fields: [employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "in_progress_vacancies_employee_id_foreign")
  ms_employees_in_progress_vacancies_ms_employee_idToms_employees ms_employees?                           @relation("in_progress_vacancies_ms_employee_idToms_employees", fields: [ms_employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "in_progress_vacancies_ms_employee_id_foreign")
  ms_employees_in_progress_vacancies_ms_from_idToms_employees     ms_employees?                           @relation("in_progress_vacancies_ms_from_idToms_employees", fields: [ms_from_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "in_progress_vacancies_ms_from_id_foreign")
  ms_employees_in_progress_vacancies_ms_to_idToms_employees       ms_employees?                           @relation("in_progress_vacancies_ms_to_idToms_employees", fields: [ms_to_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "in_progress_vacancies_ms_to_id_foreign")
  position_codes                                                  position_codes?                         @relation(fields: [position_code_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "in_progress_vacancies_position_code_id_foreign")
  users                                                           users?                                  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "in_progress_vacancies_user_id_foreign")
  in_progress_vacancy_deadlines                                   in_progress_vacancy_deadlines[]
  in_progress_vacancy_employee_opinions                           in_progress_vacancy_employee_opinions[]
  in_progress_vacancy_status_logs                                 in_progress_vacancy_status_logs[]

  @@index([company_id], map: "in_progress_vacancies_company_id_foreign")
  @@index([employee_id], map: "in_progress_vacancies_employee_id_foreign")
  @@index([ms_employee_id], map: "in_progress_vacancies_ms_employee_id_foreign")
  @@index([ms_from_id], map: "in_progress_vacancies_ms_from_id_foreign")
  @@index([ms_to_id], map: "in_progress_vacancies_ms_to_id_foreign")
  @@index([position_code_id], map: "in_progress_vacancies_position_code_id_foreign")
  @@index([user_id], map: "in_progress_vacancies_user_id_foreign")
}

model in_progress_vacancy_deadlines {
  id                     BigInt                @id @default(autoincrement()) @db.UnsignedBigInt
  structure_id           BigInt?               @db.UnsignedBigInt
  in_progress_vacancy_id BigInt                @db.UnsignedBigInt
  deadline               DateTime              @db.DateTime(0)
  is_active              Boolean               @default(true)
  created_at             DateTime?             @db.Timestamp(0)
  updated_at             DateTime?             @db.Timestamp(0)
  in_progress_vacancies  in_progress_vacancies @relation(fields: [in_progress_vacancy_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "in_progress_vacancy_deadlines_ipv_id")
  structures             structures?           @relation(fields: [structure_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "in_progress_vacancy_deadlines_structure_id_foreign")

  @@index([in_progress_vacancy_id], map: "in_progress_vacancy_deadlines_ipv_id")
  @@index([structure_id], map: "in_progress_vacancy_deadlines_structure_id_foreign")
}

model in_progress_vacancy_employee_opinions {
  id                     BigInt                                       @id @default(autoincrement()) @db.UnsignedBigInt
  user_id                BigInt?                                      @db.UnsignedBigInt
  structure_id           BigInt                                       @db.UnsignedBigInt
  in_progress_vacancy_id BigInt                                       @db.UnsignedBigInt
  status                 in_progress_vacancy_employee_opinions_status
  path                   String?                                      @db.VarChar(255)
  comment                String?                                      @db.VarChar(255)
  created_at             DateTime?                                    @db.Timestamp(0)
  updated_at             DateTime?                                    @db.Timestamp(0)
  is_card_extension      Boolean                                      @default(false)
  in_progress_vacancies  in_progress_vacancies                        @relation(fields: [in_progress_vacancy_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "in_progress_vacancy_employee_opinions_ipv_id")
  structures             structures                                   @relation(fields: [structure_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "in_progress_vacancy_employee_opinions_structure_id_foreign")
  users                  users?                                       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "in_progress_vacancy_employee_opinions_user_id_foreign")

  @@index([in_progress_vacancy_id], map: "in_progress_vacancy_employee_opinions_ipv_id")
  @@index([structure_id], map: "in_progress_vacancy_employee_opinions_structure_id_foreign")
  @@index([user_id], map: "in_progress_vacancy_employee_opinions_user_id_foreign")
}

model in_progress_vacancy_status_logs {
  id                     BigInt                @id @default(autoincrement()) @db.UnsignedBigInt
  user_id                BigInt?               @db.UnsignedBigInt
  structure_id           BigInt?               @db.UnsignedBigInt
  in_progress_vacancy_id BigInt                @db.UnsignedBigInt
  action                 String?               @db.VarChar(255)
  from                   String?               @db.VarChar(255)
  to                     String?               @db.VarChar(255)
  path                   String?               @db.VarChar(255)
  comment                String?               @db.VarChar(255)
  created_at             DateTime?             @db.Timestamp(0)
  updated_at             DateTime?             @db.Timestamp(0)
  in_progress_vacancies  in_progress_vacancies @relation(fields: [in_progress_vacancy_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "in_progress_vacancy_status_logs_in_progress_vacancy_id_foreign")
  structures             structures?           @relation(fields: [structure_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "in_progress_vacancy_status_logs_structure_id_foreign")
  users                  users?                @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "in_progress_vacancy_status_logs_user_id_foreign")

  @@index([in_progress_vacancy_id], map: "in_progress_vacancy_status_logs_in_progress_vacancy_id_foreign")
  @@index([structure_id], map: "in_progress_vacancy_status_logs_structure_id_foreign")
  @@index([user_id], map: "in_progress_vacancy_status_logs_user_id_foreign")
}

model inspected {
  id           Int       @id @default(autoincrement())
  claim_id     Int
  inspected_by String?   @db.VarChar(100)
  comment      String?   @db.VarChar(250)
  result       String?   @db.VarChar(45)
  created_at   DateTime? @db.Timestamp(0)
  updated_at   DateTime? @default(now()) @db.Timestamp(0)
}

model job_complexities {
  id                           BigInt                         @id @default(autoincrement()) @db.UnsignedBigInt
  name_am                      String                         @db.VarChar(255)
  name_en                      String                         @db.VarChar(255)
  name_ru                      String                         @db.VarChar(255)
  job_complexity_position_code job_complexity_position_code[] @ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model job_complexity_position_code {
  job_complexity_id BigInt           @db.UnsignedBigInt
  position_code_id  BigInt           @db.UnsignedBigInt
  job_complexities  job_complexities @relation(fields: [job_complexity_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "job_complexity_position_code_job_complexity_id_foreign")
  position_codes    position_codes   @relation(fields: [position_code_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "job_complexity_position_code_position_code_id_foreign")

  @@index([job_complexity_id], map: "job_complexity_position_code_job_complexity_id_foreign")
  @@index([position_code_id], map: "job_complexity_position_code_position_code_id_foreign")
  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model job_term_position_code {
  job_term_id      BigInt         @db.UnsignedBigInt
  position_code_id BigInt         @db.UnsignedBigInt
  job_terms        job_terms      @relation(fields: [job_term_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "job_term_position_code_job_term_id_foreign")
  position_codes   position_codes @relation(fields: [position_code_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "job_term_position_code_position_code_id_foreign")

  @@index([job_term_id], map: "job_term_position_code_job_term_id_foreign")
  @@index([position_code_id], map: "job_term_position_code_position_code_id_foreign")
  @@ignore
}

model job_terms {
  id                     BigInt                   @id @default(autoincrement()) @db.UnsignedBigInt
  name_am                String                   @db.VarChar(255)
  name_en                String                   @db.VarChar(255)
  name_ru                String                   @db.VarChar(255)
  job_term_position_code job_term_position_code[] @ignore
}

model legal_types {
  id           BigInt      @id @default(autoincrement()) @db.UnsignedBigInt
  type_am      String      @db.VarChar(255)
  type_en      String      @db.VarChar(255)
  type_ru      String      @db.VarChar(255)
  long_type_am String      @db.VarChar(255)
  long_type_en String      @db.VarChar(255)
  long_type_ru String      @db.VarChar(255)
  companies    companies[]
}

model migrations {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  migration String @db.VarChar(255)
  batch     Int
}

model ms_card_receipts {
  id                       BigInt                        @id @default(autoincrement()) @db.UnsignedBigInt
  ms_card_id               BigInt                        @db.UnsignedBigInt
  ms_employee_id           BigInt                        @db.UnsignedBigInt
  signature_path           String                        @db.VarChar(255)
  receipt_path             String?                       @db.VarChar(255)
  receipt_type             ms_card_receipts_receipt_type
  gender_id                BigInt?                       @db.UnsignedBigInt
  receipt_first_name_am    String?                       @db.VarChar(255)
  receipt_last_name_am     String?                       @db.VarChar(255)
  receipt_first_name_other String?                       @db.VarChar(255)
  receipt_last_name_other  String?                       @db.VarChar(255)
  ssn                      String?                       @db.VarChar(255)
  docnum                   String?                       @db.VarChar(255)
  created_at               DateTime?                     @db.Timestamp(0)
  updated_at               DateTime?                     @db.Timestamp(0)
  genders                  genders?                      @relation(fields: [gender_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ms_card_receipts_gender_id_foreign")
  ms_cards                 ms_cards                      @relation(fields: [ms_card_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ms_card_receipts_ms_card_id_foreign")
  ms_employees             ms_employees                  @relation(fields: [ms_employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ms_card_receipts_ms_employee_id_foreign")

  @@index([gender_id], map: "ms_card_receipts_gender_id_foreign")
  @@index([ms_card_id], map: "ms_card_receipts_ms_card_id_foreign")
  @@index([ms_employee_id], map: "ms_card_receipts_ms_employee_id_foreign")
}

model ms_cards {
  id                                                  BigInt                                                @id @default(autoincrement()) @db.UnsignedBigInt
  claim_id                                            BigInt?                                               @db.UnsignedBigInt
  sub_claim_id                                        BigInt?                                               @db.UnsignedBigInt
  serial_number                                       String                                                @unique(map: "ms_cards_serial_number_unique") @db.VarChar(255)
  employee_id                                         BigInt?                                               @db.UnsignedBigInt
  eaeu_employee_id                                    BigInt?                                               @db.UnsignedBigInt
  eaeu_employee_family_member_id                      BigInt?                                               @db.UnsignedBigInt
  type                                                String?                                               @db.VarChar(20)
  status                                              ms_cards_status                                       @default(active)
  issue_date                                          DateTime                                              @db.Date
  expire_date                                         DateTime                                              @db.Date
  card_photo                                          String?                                               @db.Text
  printed_at                                          DateTime?                                             @db.DateTime(0)
  transferred_at                                      DateTime?                                             @db.DateTime(0)
  created_at                                          DateTime?                                             @db.Timestamp(0)
  updated_at                                          DateTime?                                             @db.Timestamp(0)
  not_wp_foreigner_id                                 BigInt?                                               @db.UnsignedBigInt
  not_check_generate                                  Boolean                                               @default(false)
  eaeu_employee_card_extension_requests               eaeu_employee_card_extension_requests[]
  eaeu_employee_card_recovery_requests                eaeu_employee_card_recovery_requests[]
  eaeu_employee_family_member_card_extension_requests eaeu_employee_family_member_card_extension_requests[]
  eaeu_employee_family_member_card_recovery_requests  eaeu_employee_family_member_card_recovery_requests[]
  employee_card_extension_requests                    employee_card_extension_requests[]
  employee_card_recovery_requests                     employee_card_recovery_requests[]
  ms_card_receipts                                    ms_card_receipts[]
  claims                                              claims?                                               @relation(fields: [claim_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ms_cards_claim_id_foreign")
  not_wp_foreigners                                   not_wp_foreigners?                                    @relation(fields: [not_wp_foreigner_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ms_cards_not_wp_foreigner_id_foreign")
  sub_claims                                          sub_claims?                                           @relation(fields: [sub_claim_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ms_cards_sub_claim_id_foreign")

  @@index([claim_id], map: "ms_cards_claim_id_foreign")
  @@index([not_wp_foreigner_id], map: "ms_cards_not_wp_foreigner_id_foreign")
  @@index([sub_claim_id], map: "ms_cards_sub_claim_id_foreign")
}

model ms_day_offs {
  id             BigInt       @id @default(autoincrement()) @db.UnsignedBigInt
  ms_employee_id BigInt       @db.UnsignedBigInt
  start          DateTime?    @db.Date
  end            DateTime?    @db.Date
  ms_employees   ms_employees @relation(fields: [ms_employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ms_day_offs_ms_employee_id_foreign")

  @@index([ms_employee_id], map: "ms_day_offs_ms_employee_id_foreign")
}

model ms_employees {
  id                                                                                                     BigInt                                 @id @default(autoincrement()) @db.UnsignedBigInt
  position                                                                                               String                                 @unique(map: "ms_employees_position_unique") @db.VarChar(255)
  position_name_en                                                                                       String?                                @db.VarChar(255)
  position_name_ru                                                                                       String?                                @db.VarChar(255)
  position_name_am                                                                                       String?                                @db.VarChar(255)
  user_id                                                                                                BigInt?                                @db.UnsignedBigInt
  substitute_id                                                                                          BigInt?                                @db.UnsignedBigInt
  claims_claims_ms_employee_idToms_employees                                                             claims[]                               @relation("claims_ms_employee_idToms_employees")
  claims_claims_ms_from_idToms_employees                                                                 claims[]                               @relation("claims_ms_from_idToms_employees")
  claims_claims_ms_to_idToms_employees                                                                   claims[]                               @relation("claims_ms_to_idToms_employees")
  eaeu_employee_family_members_eaeu_employee_family_members_ms_employee_idToms_employees                 eaeu_employee_family_members[]         @relation("eaeu_employee_family_members_ms_employee_idToms_employees")
  eaeu_employee_family_members_eaeu_employee_family_members_ms_from_idToms_employees                     eaeu_employee_family_members[]         @relation("eaeu_employee_family_members_ms_from_idToms_employees")
  eaeu_employee_family_members_eaeu_employee_family_members_ms_to_idToms_employees                       eaeu_employee_family_members[]         @relation("eaeu_employee_family_members_ms_to_idToms_employees")
  eaeu_employees_eaeu_employees_ms_employee_idToms_employees                                             eaeu_employees[]                       @relation("eaeu_employees_ms_employee_idToms_employees")
  eaeu_employees_eaeu_employees_ms_from_idToms_employees                                                 eaeu_employees[]                       @relation("eaeu_employees_ms_from_idToms_employees")
  eaeu_employees_eaeu_employees_ms_to_idToms_employees                                                   eaeu_employees[]                       @relation("eaeu_employees_ms_to_idToms_employees")
  in_progress_vacancies_in_progress_vacancies_ms_employee_idToms_employees                               in_progress_vacancies[]                @relation("in_progress_vacancies_ms_employee_idToms_employees")
  in_progress_vacancies_in_progress_vacancies_ms_from_idToms_employees                                   in_progress_vacancies[]                @relation("in_progress_vacancies_ms_from_idToms_employees")
  in_progress_vacancies_in_progress_vacancies_ms_to_idToms_employees                                     in_progress_vacancies[]                @relation("in_progress_vacancies_ms_to_idToms_employees")
  ms_card_receipts                                                                                       ms_card_receipts[]
  ms_day_offs                                                                                            ms_day_offs[]
  ms_employees                                                                                           ms_employees?                          @relation("ms_employeesToms_employees", fields: [substitute_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ms_employees_substitute_id_foreign")
  other_ms_employees                                                                                     ms_employees[]                         @relation("ms_employeesToms_employees")
  users                                                                                                  users?                                 @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ms_employees_user_id_foreign")
  ms_logs_ms_logs_fromToms_employees                                                                     ms_logs[]                              @relation("ms_logs_fromToms_employees")
  ms_logs_ms_logs_toToms_employees                                                                       ms_logs[]                              @relation("ms_logs_toToms_employees")
  passive_eaeu_employee_family_members_passive_eaeu_employee_family_members_ms_employee_idToms_employees passive_eaeu_employee_family_members[] @relation("passive_eaeu_employee_family_members_ms_employee_idToms_employees")
  passive_eaeu_employee_family_members_passive_eaeu_employee_family_members_ms_from_idToms_employees     passive_eaeu_employee_family_members[] @relation("passive_eaeu_employee_family_members_ms_from_idToms_employees")
  passive_eaeu_employee_family_members_passive_eaeu_employee_family_members_ms_to_idToms_employees       passive_eaeu_employee_family_members[] @relation("passive_eaeu_employee_family_members_ms_to_idToms_employees")
  vacancies_vacancies_ms_employee_idToms_employees                                                       vacancies[]                            @relation("vacancies_ms_employee_idToms_employees")
  vacancies_vacancies_ms_from_idToms_employees                                                           vacancies[]                            @relation("vacancies_ms_from_idToms_employees")
  vacancies_vacancies_ms_to_idToms_employees                                                             vacancies[]                            @relation("vacancies_ms_to_idToms_employees")

  @@index([substitute_id], map: "ms_employees_substitute_id_foreign")
  @@index([user_id], map: "ms_employees_user_id_foreign")
}

model ms_logs {
  id                                      BigInt        @id @default(autoincrement()) @db.UnsignedBigInt
  claim_id                                BigInt?       @db.UnsignedBigInt
  entity                                  String        @db.VarChar(255)
  entity_id                               BigInt        @db.UnsignedBigInt
  from                                    BigInt?       @db.UnsignedBigInt
  to                                      BigInt?       @db.UnsignedBigInt
  action                                  String?       @db.VarChar(255)
  document                                String?       @db.VarChar(255)
  send_number                             String?       @db.VarChar(255)
  comment                                 String?       @db.VarChar(255)
  type                                    Int           @default(1) @db.TinyInt
  created_at                              DateTime?     @db.Timestamp(0)
  updated_at                              DateTime?     @db.Timestamp(0)
  claims                                  claims?       @relation(fields: [claim_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ms_logs_claim_id_foreign")
  ms_employees_ms_logs_fromToms_employees ms_employees? @relation("ms_logs_fromToms_employees", fields: [from], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ms_logs_from_foreign")
  ms_employees_ms_logs_toToms_employees   ms_employees? @relation("ms_logs_toToms_employees", fields: [to], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ms_logs_to_foreign")

  @@index([claim_id], map: "ms_logs_claim_id_foreign")
  @@index([from], map: "ms_logs_from_foreign")
  @@index([to], map: "ms_logs_to_foreign")
}

model ms_request_cancel_comments {
  id            BigInt      @id @default(autoincrement()) @db.UnsignedBigInt
  user_id       BigInt      @db.UnsignedBigInt
  ms_request_id BigInt      @db.UnsignedBigInt
  comment       String?     @db.Text
  ms_requests   ms_requests @relation(fields: [ms_request_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ms_request_cancel_comments_ms_request_id_foreign")
  users         users       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ms_request_cancel_comments_user_id_foreign")

  @@index([ms_request_id], map: "ms_request_cancel_comments_ms_request_id_foreign")
  @@index([user_id], map: "ms_request_cancel_comments_user_id_foreign")
}

model ms_request_messages {
  id             BigInt      @id @default(autoincrement()) @db.UnsignedBigInt
  ms_request_id  BigInt      @db.UnsignedBigInt
  user_id        BigInt?     @db.UnsignedBigInt
  sender_type    String      @db.VarChar(255)
  sender_id      BigInt
  recipient_type String?     @db.VarChar(255)
  recipient_id   BigInt?
  document_path  String?     @db.VarChar(255)
  comment        String?     @db.Text
  created_at     DateTime?   @db.Timestamp(0)
  updated_at     DateTime?   @db.Timestamp(0)
  ms_requests    ms_requests @relation(fields: [ms_request_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ms_request_messages_ms_request_id_foreign")
  users          users?      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ms_request_messages_user_id_foreign")

  @@index([ms_request_id], map: "ms_request_messages_ms_request_id_foreign")
  @@index([user_id], map: "ms_request_messages_user_id_foreign")
}

model ms_requests {
  id                         BigInt                       @id @default(autoincrement()) @db.UnsignedBigInt
  claim_id                   BigInt?                      @db.UnsignedBigInt
  user_id                    BigInt                       @db.UnsignedBigInt
  structure_id               BigInt                       @db.UnsignedBigInt
  vacancy_id                 BigInt                       @db.UnsignedBigInt
  fine_id                    BigInt?                      @db.UnsignedBigInt
  ms_request_id              BigInt?                      @db.UnsignedBigInt
  recipient_type             String                       @db.VarChar(255)
  recipient_id               BigInt
  type                       String?                      @db.VarChar(255)
  status                     ms_requests_status           @default(pending_ms)
  seen                       Boolean                      @default(false)
  created_at                 DateTime?                    @db.Timestamp(0)
  updated_at                 DateTime?                    @db.Timestamp(0)
  ms_request_cancel_comments ms_request_cancel_comments[]
  ms_request_messages        ms_request_messages[]
  claims                     claims?                      @relation(fields: [claim_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ms_requests_claim_id_foreign")
  fines                      fines?                       @relation(fields: [fine_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ms_requests_fine_id_foreign")
  ms_requests                ms_requests?                 @relation("ms_requestsToms_requests", fields: [ms_request_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ms_requests_ms_request_id_foreign")
  other_ms_requests          ms_requests[]                @relation("ms_requestsToms_requests")
  users                      users                        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ms_requests_user_id_foreign")
  vacancy_update_logs        vacancy_update_logs[]

  @@index([claim_id], map: "ms_requests_claim_id_foreign")
  @@index([fine_id], map: "ms_requests_fine_id_foreign")
  @@index([ms_request_id], map: "ms_requests_ms_request_id_foreign")
  @@index([user_id], map: "ms_requests_user_id_foreign")
}

model news {
  id          BigInt        @id @default(autoincrement()) @db.UnsignedBigInt
  title_am    String        @db.VarChar(255)
  title_en    String?       @db.VarChar(255)
  title_ru    String?       @db.VarChar(255)
  text_am     String        @db.Text
  text_en     String?       @db.Text
  text_ru     String?       @db.Text
  views       Int           @default(0) @db.UnsignedInt
  created_at  DateTime?     @db.Timestamp(0)
  updated_at  DateTime?     @db.Timestamp(0)
  news_images news_images[]
}

model news_images {
  id      BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  news_id BigInt @db.UnsignedBigInt
  path    String @db.VarChar(255)
  news    news   @relation(fields: [news_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "news_images_news_id_foreign")

  @@index([news_id], map: "news_images_news_id_foreign")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model not_wp_foreigners {
  id             BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  ssn            String?    @unique(map: "not_wp_foreigners_ssn_unique") @db.VarChar(255)
  first_name_am  String     @db.VarChar(255)
  last_name_am   String     @db.VarChar(255)
  patronymic_am  String     @db.VarChar(255)
  first_name_en  String?    @db.VarChar(255)
  last_name_en   String?    @db.VarChar(255)
  patronymic_en  String?    @db.VarChar(255)
  birth_date     String     @db.VarChar(255)
  gender_id      BigInt?    @db.UnsignedBigInt
  citizenship_id BigInt?    @db.UnsignedBigInt
  info_from_sect Boolean    @default(false)
  passport       String?    @db.VarChar(255)
  email          String?    @db.VarChar(255)
  notified       DateTime?  @db.Timestamp(0)
  created_at     DateTime?  @db.Timestamp(0)
  updated_at     DateTime?  @db.Timestamp(0)
  ms_cards       ms_cards[]
  countries      countries? @relation(fields: [citizenship_id], references: [id], onUpdate: NoAction, map: "not_wp_foreigners_citizenship_id_foreign")
  genders        genders?   @relation(fields: [gender_id], references: [id], onUpdate: NoAction, map: "not_wp_foreigners_gender_id_foreign")

  @@index([citizenship_id], map: "not_wp_foreigners_citizenship_id_foreign")
  @@index([gender_id], map: "not_wp_foreigners_gender_id_foreign")
}

model notifications {
  id              String    @id @db.Char(36)
  type            String    @db.VarChar(255)
  notifiable_type String    @db.VarChar(255)
  notifiable_id   BigInt    @db.UnsignedBigInt
  data            String    @db.Text
  read_at         DateTime? @db.Timestamp(0)
  seen_at         DateTime? @db.Timestamp(0)
  created_at      DateTime? @db.Timestamp(0)
  updated_at      DateTime? @db.Timestamp(0)
  deleted_at      DateTime? @db.Timestamp(0)

  @@index([notifiable_type, notifiable_id], map: "notifications_notifiable_type_notifiable_id_index")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model passive_eaeu_employee_family_members {
  id                                                                             BigInt                       @id @default(autoincrement()) @db.UnsignedBigInt
  user_id                                                                        BigInt                       @db.UnsignedBigInt
  active_eaeu_employee_family_member_id                                          BigInt                       @db.UnsignedBigInt
  status                                                                         String?                      @default("active") @db.VarChar(255)
  ms_employee_id                                                                 BigInt?                      @db.UnsignedBigInt
  ms_from_id                                                                     BigInt?                      @db.UnsignedBigInt
  ms_to_id                                                                       BigInt?                      @db.UnsignedBigInt
  first_name_am                                                                  String                       @db.VarChar(255)
  last_name_am                                                                   String                       @db.VarChar(255)
  patronymic_am                                                                  String?                      @db.VarChar(255)
  first_name_en                                                                  String?                      @db.VarChar(255)
  last_name_en                                                                   String?                      @db.VarChar(255)
  patronymic_en                                                                  String?                      @db.VarChar(255)
  first_name_ru                                                                  String?                      @db.VarChar(255)
  last_name_ru                                                                   String?                      @db.VarChar(255)
  patronymic_ru                                                                  String?                      @db.VarChar(255)
  email                                                                          String                       @db.VarChar(255)
  citizenship_id                                                                 BigInt                       @db.UnsignedBigInt
  birthday_year                                                                  String                       @db.VarChar(255)
  birthday_month                                                                 String                       @db.VarChar(255)
  birthday_day                                                                   String                       @db.VarChar(255)
  gender_id                                                                      BigInt                       @db.UnsignedBigInt
  passport_number                                                                String?                      @db.VarChar(255)
  passport_issued                                                                DateTime?                    @db.Date
  passport_valid                                                                 DateTime?                    @db.Date
  passport_img                                                                   String?                      @db.VarChar(255)
  ssn                                                                            String?                      @db.VarChar(255)
  actual_address                                                                 String                       @db.VarChar(255)
  address                                                                        String?                      @db.VarChar(255)
  family_member_id                                                               BigInt?                      @db.UnsignedBigInt
  needs_certificate                                                              Boolean
  telephone                                                                      String?                      @db.VarChar(255)
  passive_created_at                                                             DateTime                     @db.DateTime(0)
  passive_updated_at                                                             DateTime                     @db.DateTime(0)
  created_at                                                                     DateTime?                    @db.Timestamp(0)
  updated_at                                                                     DateTime?                    @db.Timestamp(0)
  eaeu_employee_family_members                                                   eaeu_employee_family_members @relation(fields: [active_eaeu_employee_family_member_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "active_family_id")
  countries                                                                      countries                    @relation(fields: [citizenship_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "passive_eaeu_employee_family_members_citizenship_id_foreign")
  family_members                                                                 family_members?              @relation(fields: [family_member_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "passive_eaeu_employee_family_members_family_member_id_foreign")
  genders                                                                        genders                      @relation(fields: [gender_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "passive_eaeu_employee_family_members_gender_id_foreign")
  ms_employees_passive_eaeu_employee_family_members_ms_employee_idToms_employees ms_employees?                @relation("passive_eaeu_employee_family_members_ms_employee_idToms_employees", fields: [ms_employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "passive_eaeu_employee_family_members_ms_employee_id_foreign")
  ms_employees_passive_eaeu_employee_family_members_ms_from_idToms_employees     ms_employees?                @relation("passive_eaeu_employee_family_members_ms_from_idToms_employees", fields: [ms_from_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "passive_eaeu_employee_family_members_ms_from_id_foreign")
  ms_employees_passive_eaeu_employee_family_members_ms_to_idToms_employees       ms_employees?                @relation("passive_eaeu_employee_family_members_ms_to_idToms_employees", fields: [ms_to_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "passive_eaeu_employee_family_members_ms_to_id_foreign")
  users                                                                          users                        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "passive_eaeu_employee_family_members_user_id_foreign")

  @@index([active_eaeu_employee_family_member_id], map: "active_family_id")
  @@index([citizenship_id], map: "passive_eaeu_employee_family_members_citizenship_id_foreign")
  @@index([family_member_id], map: "passive_eaeu_employee_family_members_family_member_id_foreign")
  @@index([gender_id], map: "passive_eaeu_employee_family_members_gender_id_foreign")
  @@index([ms_employee_id], map: "passive_eaeu_employee_family_members_ms_employee_id_foreign")
  @@index([ms_from_id], map: "passive_eaeu_employee_family_members_ms_from_id_foreign")
  @@index([ms_to_id], map: "passive_eaeu_employee_family_members_ms_to_id_foreign")
  @@index([user_id], map: "passive_eaeu_employee_family_members_user_id_foreign")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model password_resets {
  email      String    @db.VarChar(255)
  token      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)

  @@index([email], map: "password_resets_email_index")
  @@ignore
}

model personal_access_tokens {
  id             BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  tokenable_type String    @db.VarChar(255)
  tokenable_id   BigInt    @db.UnsignedBigInt
  name           String    @db.VarChar(255)
  token          String    @unique(map: "personal_access_tokens_token_unique") @db.VarChar(64)
  abilities      String?   @db.Text
  last_used_at   DateTime? @db.Timestamp(0)
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)

  @@index([tokenable_type, tokenable_id], map: "personal_access_tokens_tokenable_type_tokenable_id_index")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model position_codes {
  id                            BigInt                          @id @default(autoincrement()) @db.UnsignedBigInt
  code                          String                          @unique(map: "position_codes_code_unique") @db.VarChar(255)
  occupation_classifier_code    String                          @db.VarChar(255)
  min_education_level_id        BigInt                          @db.UnsignedBigInt
  profession_type               Int                             @db.TinyInt
  name_am                       String                          @db.Text
  name_en                       String                          @db.Text
  name_ru                       String                          @db.Text
  terms_codes                   String                          @db.Text
  education_codes               String                          @db.Text
  complexity_codes              String                          @db.Text
  education_level_position_code education_level_position_code[] @ignore
  in_progress_vacancies         in_progress_vacancies[]
  job_complexity_position_code  job_complexity_position_code[]  @ignore
  job_term_position_code        job_term_position_code[]        @ignore
  education_levels              education_levels                @relation(fields: [min_education_level_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "position_codes_min_education_level_id_foreign")
  vacancies                     vacancies[]

  @@index([min_education_level_id], map: "position_codes_min_education_level_id_foreign")
}

model roles {
  id           BigInt      @id @default(autoincrement()) @db.UnsignedBigInt
  structure_id BigInt?     @db.UnsignedBigInt
  name_am      String      @unique(map: "roles_name_am_unique") @db.VarChar(255)
  name_en      String      @unique(map: "roles_name_en_unique") @db.VarChar(255)
  name_ru      String      @unique(map: "roles_name_ru_unique") @db.VarChar(255)
  structures   structures? @relation(fields: [structure_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "roles_structure_id_foreign")
  users        users[]

  @@index([structure_id], map: "roles_structure_id_foreign")
}

model sekt_crossing_infos {
  id              BigInt                        @id @default(autoincrement()) @db.UnsignedBigInt
  sekt_request_id BigInt                        @db.UnsignedBigInt
  name            String                        @db.VarChar(255)
  surname         String?                       @db.VarChar(255)
  passport_number String                        @db.VarChar(255)
  direction       sekt_crossing_infos_direction
  birth_date      DateTime                      @db.DateTime(0)
  status          String                        @db.VarChar(50)
  date            DateTime                      @db.DateTime(0)
  created_at      DateTime?                     @db.Timestamp(0)
  updated_at      DateTime?                     @db.Timestamp(0)
  sekt_requests   sekt_requests                 @relation(fields: [sekt_request_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "sekt_crossing_infos_sekt_request_id_foreign")

  @@index([sekt_request_id], map: "sekt_crossing_infos_sekt_request_id_foreign")
}

model sekt_request_logs {
  id                            BigInt        @id @default(autoincrement()) @db.UnsignedBigInt
  user_id                       BigInt        @db.UnsignedBigInt
  sekt_request_id               BigInt        @db.UnsignedBigInt
  created_at                    DateTime?     @db.Timestamp(0)
  updated_at                    DateTime?     @db.Timestamp(0)
  administrative_responsibility Boolean
  sekt_requests                 sekt_requests @relation(fields: [sekt_request_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "sekt_request_logs_sekt_request_id_foreign")
  users                         users         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "sekt_request_logs_user_id_foreign")

  @@index([sekt_request_id], map: "sekt_request_logs_sekt_request_id_foreign")
  @@index([user_id], map: "sekt_request_logs_user_id_foreign")
}

model sekt_requests {
  id                             BigInt                        @id @default(autoincrement()) @db.UnsignedBigInt
  employee_id                    BigInt?                       @db.UnsignedBigInt
  eaeu_employee_id               BigInt?                       @db.UnsignedBigInt
  eaeu_employee_family_member_id BigInt?                       @db.UnsignedBigInt
  administrative_responsibility  Int                           @default(0) @db.SmallInt
  answer                         String?                       @db.VarChar(255)
  created_at                     DateTime?                     @db.Timestamp(0)
  updated_at                     DateTime?                     @db.Timestamp(0)
  user_id                        BigInt?                       @db.UnsignedBigInt
  sekt_crossing_infos            sekt_crossing_infos[]
  sekt_request_logs              sekt_request_logs[]
  eaeu_employee_family_members   eaeu_employee_family_members? @relation(fields: [eaeu_employee_family_member_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "sekt_requests_eaeu_employee_family_member_id_foreign")
  eaeu_employees                 eaeu_employees?               @relation(fields: [eaeu_employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "sekt_requests_eaeu_employee_id_foreign")
  employees                      employees?                    @relation(fields: [employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "sekt_requests_employee_id_foreign")
  sekt_visa_infos                sekt_visa_infos[]

  @@index([eaeu_employee_family_member_id], map: "sekt_requests_eaeu_employee_family_member_id_foreign")
  @@index([eaeu_employee_id], map: "sekt_requests_eaeu_employee_id_foreign")
  @@index([employee_id], map: "sekt_requests_employee_id_foreign")
}

model sekt_visa_infos {
  id              BigInt        @id @default(autoincrement()) @db.UnsignedBigInt
  sekt_request_id BigInt        @db.UnsignedBigInt
  number          String        @db.VarChar(50)
  type            String        @db.VarChar(50)
  allowed_days    Int
  valid_from      DateTime      @db.DateTime(0)
  valid_to        DateTime      @db.DateTime(0)
  status          String        @db.VarChar(50)
  created_at      DateTime?     @db.Timestamp(0)
  updated_at      DateTime?     @db.Timestamp(0)
  sekt_requests   sekt_requests @relation(fields: [sekt_request_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "sekt_visa_infos_sekt_request_id_foreign")

  @@index([sekt_request_id], map: "sekt_visa_infos_sekt_request_id_foreign")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model send_to_pki {
  card_id       BigInt  @default(0) @db.UnsignedBigInt
  serial_number String  @default("") @db.VarChar(255)
  first_name_am String  @default("") @db.VarChar(255)
  last_name_am  String  @default("") @db.VarChar(255)
  first_name_en String? @db.VarChar(255)
  last_name_en  String? @db.VarChar(255)
  ssn           String? @db.VarChar(255)
  email         String  @default("") @db.VarChar(255)
  tablename     String  @default("") @db.VarChar(11)
  status        Int?    @default(0)

  @@ignore
}

model spheres {
  id          Int      @id @default(autoincrement())
  name        String?  @db.VarChar(255)
  tin         String   @unique(map: "tin") @db.VarChar(255)
  sphere_code String?  @db.VarChar(255)
  sphere_text String?  @db.LongText
  is_checked  Boolean? @default(false)
  createdAt   DateTime @default(now()) @db.Timestamp(0)
  updatedAt   DateTime @default(now()) @db.Timestamp(0)
}

model structures {
  id                                                           BigInt                                                         @id @default(autoincrement()) @db.UnsignedBigInt
  name                                                         String                                                         @unique(map: "structures_name_unique") @db.VarChar(255)
  name_ru                                                      String?                                                        @db.VarChar(255)
  name_en                                                      String?                                                        @db.VarChar(255)
  claim_deadlines                                              claim_deadlines[]
  claim_status_logs                                            claim_status_logs[]
  department_logs                                              department_logs[]
  departments                                                  departments[]
  eaeu_employee_card_extension_request_deadlines               eaeu_employee_card_extension_request_deadlines[]
  eaeu_employee_deadlines                                      eaeu_employee_deadlines[]
  eaeu_employee_family_member_card_extension_request_deadlines eaeu_employee_family_member_card_extension_request_deadlines[]
  eaeu_employee_family_member_deadlines                        eaeu_employee_family_member_deadlines[]
  employee_card_extension_request_deadlines                    employee_card_extension_request_deadlines[]
  excepted_professions                                         excepted_professions[]
  in_progress_vacancy_deadlines                                in_progress_vacancy_deadlines[]
  in_progress_vacancy_employee_opinions                        in_progress_vacancy_employee_opinions[]
  in_progress_vacancy_status_logs                              in_progress_vacancy_status_logs[]
  roles                                                        roles[]
  structures_tokens                                            structures_tokens[]
  sub_claim_status_logs                                        sub_claim_status_logs[]
  vacancy_deadlines                                            vacancy_deadlines[]
  vacancy_employee_opinions                                    vacancy_employee_opinions[]
  vacancy_status_logs                                          vacancy_status_logs[]
}

model structures_tokens {
  id           BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  structure_id BigInt     @db.UnsignedBigInt
  token        String     @db.VarChar(255)
  is_active    Boolean    @default(true)
  structures   structures @relation(fields: [structure_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "structures_tokens_structure_id_foreign")

  @@index([structure_id], map: "structures_tokens_structure_id_foreign")
}

model sub_claim_files {
  id           BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  sub_claim_id BigInt     @db.UnsignedBigInt
  user_id      BigInt?    @db.UnsignedBigInt
  type         String     @db.VarChar(255)
  path         String     @db.VarChar(255)
  active       Boolean    @default(true)
  created_at   DateTime?  @db.Timestamp(0)
  updated_at   DateTime?  @db.Timestamp(0)
  sub_claims   sub_claims @relation(fields: [sub_claim_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "sub_claim_files_sub_claim_id_foreign")
  users        users?     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "sub_claim_files_user_id_foreign")

  @@index([sub_claim_id], map: "sub_claim_files_sub_claim_id_foreign")
  @@index([user_id], map: "sub_claim_files_user_id_foreign")
}

model sub_claim_status_logs {
  id           BigInt      @id @default(autoincrement()) @db.UnsignedBigInt
  sub_claim_id BigInt      @db.UnsignedBigInt
  user_id      BigInt?     @db.UnsignedBigInt
  structure_id BigInt?     @db.UnsignedBigInt
  from         String?     @db.VarChar(255)
  to           String?     @db.VarChar(255)
  comment      String?     @db.VarChar(255)
  from_cancel  Boolean     @default(false)
  created_at   DateTime?   @db.Timestamp(0)
  updated_at   DateTime?   @db.Timestamp(0)
  structures   structures? @relation(fields: [structure_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "sub_claim_status_logs_structure_id_foreign")
  sub_claims   sub_claims  @relation(fields: [sub_claim_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "sub_claim_status_logs_sub_claim_id_foreign")
  users        users?      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "sub_claim_status_logs_user_id_foreign")

  @@index([structure_id], map: "sub_claim_status_logs_structure_id_foreign")
  @@index([sub_claim_id], map: "sub_claim_status_logs_sub_claim_id_foreign")
  @@index([user_id], map: "sub_claim_status_logs_user_id_foreign")
}

model sub_claims {
  id                             BigInt                        @id @default(autoincrement()) @db.UnsignedBigInt
  claim_id                       BigInt?                       @db.UnsignedBigInt
  sub_claim_id                   BigInt?                       @db.UnsignedBigInt
  user_id                        BigInt?                       @db.UnsignedBigInt
  employee_id                    BigInt?                       @db.UnsignedBigInt
  eaeu_employee_id               BigInt?                       @db.UnsignedBigInt
  eaeu_employee_family_member_id BigInt?                       @db.UnsignedBigInt
  type                           String?                       @db.VarChar(255)
  status                         String?                       @db.VarChar(255)
  created_at                     DateTime?                     @db.Timestamp(0)
  updated_at                     DateTime?                     @db.Timestamp(0)
  data                           Json?
  comment                        String?                       @db.Text
  claim_deadlines                claim_deadlines[]
  ms_cards                       ms_cards[]
  sub_claim_files                sub_claim_files[]
  sub_claim_status_logs          sub_claim_status_logs[]
  claims                         claims?                       @relation(fields: [claim_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "sub_claims_claim_id_foreign")
  eaeu_employee_family_members   eaeu_employee_family_members? @relation(fields: [eaeu_employee_family_member_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "sub_claims_eaeu_employee_family_member_id_foreign")
  eaeu_employees                 eaeu_employees?               @relation(fields: [eaeu_employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "sub_claims_eaeu_employee_id_foreign")
  employees                      employees?                    @relation(fields: [employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "sub_claims_employee_id_foreign")
  sub_claims                     sub_claims?                   @relation("sub_claimsTosub_claims", fields: [sub_claim_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "sub_claims_sub_claim_id_foreign")
  other_sub_claims               sub_claims[]                  @relation("sub_claimsTosub_claims")
  users                          users?                        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "sub_claims_user_id_foreign")

  @@index([claim_id], map: "sub_claims_claim_id_foreign")
  @@index([eaeu_employee_family_member_id], map: "sub_claims_eaeu_employee_family_member_id_foreign")
  @@index([eaeu_employee_id], map: "sub_claims_eaeu_employee_id_foreign")
  @@index([employee_id], map: "sub_claims_employee_id_foreign")
  @@index([sub_claim_id], map: "sub_claims_sub_claim_id_foreign")
  @@index([user_id], map: "sub_claims_user_id_foreign")
}

model tax_requests {
  id                          BigInt          @id @default(autoincrement()) @db.UnsignedBigInt
  claim_id                    BigInt          @db.UnsignedBigInt
  employee_id                 BigInt?         @db.UnsignedBigInt
  eaeu_employee_id            BigInt?         @db.UnsignedBigInt
  tin                         String?         @db.VarChar(255)
  answer                      String          @db.VarChar(255)
  last_date                   String?         @db.VarChar(255)
  salary                      String?         @db.VarChar(255)
  tax                         String?         @db.VarChar(255)
  social_payments             String?         @db.VarChar(255)
  social_payments_paid        String?         @db.VarChar(255)
  working_hours               String?         @db.VarChar(255)
  civil_low_contract_payments String?         @db.VarChar(255)
  created_at                  DateTime?       @db.Timestamp(0)
  updated_at                  DateTime?       @db.Timestamp(0)
  worked_cron_date            DateTime?       @db.DateTime(0)
  claims                      claims          @relation(fields: [claim_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "tax_requests_claim_id_foreign")
  eaeu_employees              eaeu_employees? @relation(fields: [eaeu_employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "tax_requests_eaeu_employee_id_foreign")
  employees                   employees?      @relation(fields: [employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "tax_requests_employee_id_foreign")

  @@index([claim_id], map: "tax_requests_claim_id_foreign")
  @@index([eaeu_employee_id], map: "tax_requests_eaeu_employee_id_foreign")
  @@index([employee_id], map: "tax_requests_employee_id_foreign")
}

model terminate_arm_citizen_logs {
  id                             BigInt                        @id @default(autoincrement()) @db.UnsignedBigInt
  employee_id                    BigInt?                       @db.UnsignedBigInt
  eaeu_employee_id               BigInt?                       @db.UnsignedBigInt
  eaeu_employee_family_member_id BigInt?                       @db.UnsignedBigInt
  data                           String                        @db.Text
  created_at                     DateTime?                     @db.Timestamp(0)
  updated_at                     DateTime?                     @db.Timestamp(0)
  eaeu_employee_family_members   eaeu_employee_family_members? @relation(fields: [eaeu_employee_family_member_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "term_log_eaeu_employee_family_member_id")
  eaeu_employees                 eaeu_employees?               @relation(fields: [eaeu_employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "term_log_eaeu_employee_id")
  employees                      employees?                    @relation(fields: [employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "term_log_employee_id")

  @@index([eaeu_employee_family_member_id], map: "term_log_eaeu_employee_family_member_id")
  @@index([eaeu_employee_id], map: "term_log_eaeu_employee_id")
  @@index([employee_id], map: "term_log_employee_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model user_verifications {
  id                                                   BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id                                              BigInt    @db.UnsignedBigInt
  verification_user_id                                 BigInt    @db.UnsignedBigInt
  old_email                                            String?   @db.VarChar(255)
  email                                                String?   @db.VarChar(255)
  type                                                 String    @db.VarChar(20)
  hash                                                 String    @db.Text
  verified_at                                          DateTime? @db.DateTime(0)
  created_at                                           DateTime? @db.Timestamp(0)
  updated_at                                           DateTime? @db.Timestamp(0)
  document                                             String    @db.VarChar(255)
  users_user_verifications_user_idTousers              users     @relation("user_verifications_user_idTousers", fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_verifications_user_id_foreign")
  users_user_verifications_verification_user_idTousers users     @relation("user_verifications_verification_user_idTousers", fields: [verification_user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_verifications_verification_user_id_foreign")

  @@index([user_id], map: "user_verifications_user_id_foreign")
  @@index([verification_user_id], map: "user_verifications_verification_user_id_foreign")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model users {
  id                                                                BigInt                                  @id @default(autoincrement()) @db.UnsignedBigInt
  role_id                                                           BigInt                                  @db.UnsignedBigInt
  department_id                                                     BigInt?                                 @db.UnsignedBigInt
  first_name_am                                                     String                                  @db.VarChar(255)
  last_name_am                                                      String                                  @db.VarChar(255)
  email                                                             String                                  @unique(map: "users_email_unique") @db.VarChar(255)
  ssn                                                               String?                                 @db.VarChar(255)
  patronymic_am                                                     String?                                 @db.VarChar(255)
  first_name_en                                                     String?                                 @db.VarChar(255)
  last_name_en                                                      String?                                 @db.VarChar(255)
  patronymic_en                                                     String?                                 @db.VarChar(255)
  first_name_ru                                                     String?                                 @db.VarChar(255)
  last_name_ru                                                      String?                                 @db.VarChar(255)
  patronymic_ru                                                     String?                                 @db.VarChar(255)
  email_verified_at                                                 DateTime?                               @db.Timestamp(0)
  last_active_at                                                    DateTime?                               @db.Timestamp(0)
  password                                                          String                                  @db.VarChar(255)
  remember_token                                                    String?                                 @db.VarChar(100)
  deleted_at                                                        DateTime?                               @db.Timestamp(0)
  created_at                                                        DateTime?                               @db.Timestamp(0)
  updated_at                                                        DateTime?                               @db.Timestamp(0)
  gender_id                                                         BigInt?                                 @db.UnsignedBigInt
  telephone                                                         String?                                 @db.VarChar(255)
  email_notifications_confirmed_at                                  DateTime?                               @db.Timestamp(0)
  check_histories                                                   check_histories[]
  claim_files                                                       claim_files[]
  claim_status_logs                                                 claim_status_logs[]
  claims                                                            claims[]
  company_user                                                      company_user[]                          @ignore
  department_logs                                                   department_logs[]
  eaeu_employee_family_members                                      eaeu_employee_family_members[]
  eaeu_employee_update_logs                                         eaeu_employee_update_logs[]
  eaeu_employees                                                    eaeu_employees[]
  employee_ssn_requests                                             employee_ssn_requests[]
  employee_update_logs                                              employee_update_logs[]
  employees                                                         employees[]
  fine_comments                                                     fine_comments[]
  fine_logs                                                         fine_logs[]
  fines                                                             fines[]
  in_progress_vacancies                                             in_progress_vacancies[]
  in_progress_vacancy_employee_opinions                             in_progress_vacancy_employee_opinions[]
  in_progress_vacancy_status_logs                                   in_progress_vacancy_status_logs[]
  ms_employees                                                      ms_employees[]
  ms_request_cancel_comments                                        ms_request_cancel_comments[]
  ms_request_messages                                               ms_request_messages[]
  ms_requests                                                       ms_requests[]
  passive_eaeu_employee_family_members                              passive_eaeu_employee_family_members[]
  sekt_request_logs                                                 sekt_request_logs[]
  sub_claim_files                                                   sub_claim_files[]
  sub_claim_status_logs                                             sub_claim_status_logs[]
  sub_claims                                                        sub_claims[]
  user_verifications_user_verifications_user_idTousers              user_verifications[]                    @relation("user_verifications_user_idTousers")
  user_verifications_user_verifications_verification_user_idTousers user_verifications[]                    @relation("user_verifications_verification_user_idTousers")
  departments                                                       departments?                            @relation(fields: [department_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_department_id_foreign")
  genders                                                           genders?                                @relation(fields: [gender_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_gender_id_foreign")
  roles                                                             roles                                   @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_role_id_foreign")
  vacancies                                                         vacancies[]
  vacancy_employee_opinions                                         vacancy_employee_opinions[]
  vacancy_status_logs                                               vacancy_status_logs[]
  vacancy_update_logs                                               vacancy_update_logs[]

  @@index([department_id], map: "users_department_id_foreign")
  @@index([gender_id], map: "users_gender_id_foreign")
  @@index([role_id], map: "users_role_id_foreign")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model vacancies {
  id                                                  BigInt                              @id @default(autoincrement()) @db.UnsignedBigInt
  company_id                                          BigInt                              @db.UnsignedBigInt
  user_id                                             BigInt                              @db.UnsignedBigInt
  employee_id                                         BigInt?                             @db.UnsignedBigInt
  parent_id                                           BigInt?                             @db.UnsignedBigInt
  ms_employee_id                                      BigInt?                             @db.UnsignedBigInt
  ms_from_id                                          BigInt?                             @db.UnsignedBigInt
  ms_to_id                                            BigInt?                             @db.UnsignedBigInt
  status                                              vacancies_status                    @default(pending_am)
  type                                                Int                                 @db.TinyInt
  excepted_profession_id                              BigInt?                             @db.UnsignedBigInt
  title                                               String                              @db.VarChar(255)
  position_code_id                                    BigInt                              @db.UnsignedBigInt
  agreement_start_date                                DateTime                            @db.Date
  agreement_end_date                                  DateTime                            @db.Date
  job_responsibilities                                String?                             @db.Text
  salary                                              Decimal?                            @db.Decimal(10, 2)
  salary_text                                         String?                             @db.VarChar(255)
  weekly_hours                                        Int?
  address                                             String                              @db.VarChar(255)
  education_level_id                                  BigInt?                             @db.UnsignedBigInt
  job_requirements                                    String?                             @db.Text
  created_at                                          DateTime?                           @db.Timestamp(0)
  updated_at                                          DateTime?                           @db.Timestamp(0)
  claims                                              claims[]
  employee_card_extension_requests                    employee_card_extension_requests[]
  employee_update_logs                                employee_update_logs[]
  exception_certification_documents                   exception_certification_documents[]
  companies                                           companies                           @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "vacancies_company_id_foreign")
  education_levels                                    education_levels?                   @relation(fields: [education_level_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "vacancies_education_level_id_foreign")
  employees                                           employees?                          @relation(fields: [employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "vacancies_employee_id_foreign")
  excepted_professions                                excepted_professions?               @relation(fields: [excepted_profession_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "vacancies_excepted_profession_id_foreign")
  ms_employees_vacancies_ms_employee_idToms_employees ms_employees?                       @relation("vacancies_ms_employee_idToms_employees", fields: [ms_employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "vacancies_ms_employee_id_foreign")
  ms_employees_vacancies_ms_from_idToms_employees     ms_employees?                       @relation("vacancies_ms_from_idToms_employees", fields: [ms_from_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "vacancies_ms_from_id_foreign")
  ms_employees_vacancies_ms_to_idToms_employees       ms_employees?                       @relation("vacancies_ms_to_idToms_employees", fields: [ms_to_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "vacancies_ms_to_id_foreign")
  vacancies                                           vacancies?                          @relation("vacanciesTovacancies", fields: [parent_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "vacancies_parent_id_foreign")
  other_vacancies                                     vacancies[]                         @relation("vacanciesTovacancies")
  position_codes                                      position_codes                      @relation(fields: [position_code_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "vacancies_position_code_id_foreign")
  users                                               users                               @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "vacancies_user_id_foreign")
  vacancy_deadlines                                   vacancy_deadlines[]
  vacancy_employee_opinions                           vacancy_employee_opinions[]
  vacancy_files                                       vacancy_files[]
  vacancy_status_logs                                 vacancy_status_logs[]
  vacancy_update_logs                                 vacancy_update_logs[]
  volunteer_files                                     volunteer_files[]

  @@index([company_id], map: "vacancies_company_id_foreign")
  @@index([education_level_id], map: "vacancies_education_level_id_foreign")
  @@index([employee_id], map: "vacancies_employee_id_foreign")
  @@index([excepted_profession_id], map: "vacancies_excepted_profession_id_foreign")
  @@index([ms_employee_id], map: "vacancies_ms_employee_id_foreign")
  @@index([ms_from_id], map: "vacancies_ms_from_id_foreign")
  @@index([ms_to_id], map: "vacancies_ms_to_id_foreign")
  @@index([parent_id], map: "vacancies_parent_id_foreign")
  @@index([position_code_id], map: "vacancies_position_code_id_foreign")
  @@index([user_id], map: "vacancies_user_id_foreign")
}

model vacancy_deadlines {
  id           BigInt      @id @default(autoincrement()) @db.UnsignedBigInt
  structure_id BigInt?     @db.UnsignedBigInt
  company_id   BigInt?     @db.UnsignedBigInt
  vacancy_id   BigInt      @db.UnsignedBigInt
  deadline     DateTime    @db.DateTime(0)
  is_active    Boolean     @default(true)
  created_at   DateTime?   @db.Timestamp(0)
  updated_at   DateTime?   @db.Timestamp(0)
  companies    companies?  @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "vacancy_deadlines_company_id_foreign")
  structures   structures? @relation(fields: [structure_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "vacancy_deadlines_structure_id_foreign")
  vacancies    vacancies   @relation(fields: [vacancy_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "vacancy_deadlines_vacancy_id_foreign")

  @@index([company_id], map: "vacancy_deadlines_company_id_foreign")
  @@index([structure_id], map: "vacancy_deadlines_structure_id_foreign")
  @@index([vacancy_id], map: "vacancy_deadlines_vacancy_id_foreign")
}

model vacancy_employee_opinions {
  id                BigInt                           @id @default(autoincrement()) @db.UnsignedBigInt
  user_id           BigInt?                          @db.UnsignedBigInt
  structure_id      BigInt                           @db.UnsignedBigInt
  vacancy_id        BigInt                           @db.UnsignedBigInt
  status            vacancy_employee_opinions_status
  path              String?                          @db.VarChar(255)
  comment           String?                          @db.VarChar(255)
  is_card_extension Boolean                          @default(false)
  created_at        DateTime?                        @db.Timestamp(0)
  updated_at        DateTime?                        @db.Timestamp(0)
  structures        structures                       @relation(fields: [structure_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "vacancy_employee_opinions_structure_id_foreign")
  users             users?                           @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "vacancy_employee_opinions_user_id_foreign")
  vacancies         vacancies                        @relation(fields: [vacancy_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "vacancy_employee_opinions_vacancy_id_foreign")

  @@index([structure_id], map: "vacancy_employee_opinions_structure_id_foreign")
  @@index([user_id], map: "vacancy_employee_opinions_user_id_foreign")
  @@index([vacancy_id], map: "vacancy_employee_opinions_vacancy_id_foreign")
}

model vacancy_files {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  vacancy_id BigInt    @db.UnsignedBigInt
  type       String    @db.VarChar(255)
  path       String    @db.VarChar(255)
  active     Boolean   @default(true)
  vacancies  vacancies @relation(fields: [vacancy_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "vacancy_files_vacancy_id_foreign")

  @@index([vacancy_id], map: "vacancy_files_vacancy_id_foreign")
}

model vacancy_status_logs {
  id           BigInt      @id @default(autoincrement()) @db.UnsignedBigInt
  user_id      BigInt?     @db.UnsignedBigInt
  structure_id BigInt?     @db.UnsignedBigInt
  vacancy_id   BigInt      @db.UnsignedBigInt
  action       String?     @db.VarChar(255)
  from         String?     @db.VarChar(255)
  to           String?     @db.VarChar(255)
  path         String?     @db.VarChar(255)
  comment      String?     @db.VarChar(255)
  created_at   DateTime?   @db.Timestamp(0)
  updated_at   DateTime?   @db.Timestamp(0)
  structures   structures? @relation(fields: [structure_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "vacancy_status_logs_structure_id_foreign")
  users        users?      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "vacancy_status_logs_user_id_foreign")
  vacancies    vacancies   @relation(fields: [vacancy_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "vacancy_status_logs_vacancy_id_foreign")

  @@index([structure_id], map: "vacancy_status_logs_structure_id_foreign")
  @@index([user_id], map: "vacancy_status_logs_user_id_foreign")
  @@index([vacancy_id], map: "vacancy_status_logs_vacancy_id_foreign")
}

model vacancy_update_logs {
  id            BigInt       @id @default(autoincrement()) @db.UnsignedBigInt
  vacancy_id    BigInt       @db.UnsignedBigInt
  employee_id   BigInt?      @db.UnsignedBigInt
  ms_request_id BigInt?      @db.UnsignedBigInt
  user_id       BigInt       @db.UnsignedBigInt
  data          Json
  created_at    DateTime?    @db.Timestamp(0)
  updated_at    DateTime?    @db.Timestamp(0)
  employees     employees?   @relation(fields: [employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "vacancy_update_logs_employee_id_foreign")
  ms_requests   ms_requests? @relation(fields: [ms_request_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "vacancy_update_logs_ms_request_id_foreign")
  users         users        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "vacancy_update_logs_user_id_foreign")
  vacancies     vacancies    @relation(fields: [vacancy_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "vacancy_update_logs_vacancy_id_foreign")

  @@index([employee_id], map: "vacancy_update_logs_employee_id_foreign")
  @@index([ms_request_id], map: "vacancy_update_logs_ms_request_id_foreign")
  @@index([user_id], map: "vacancy_update_logs_user_id_foreign")
  @@index([vacancy_id], map: "vacancy_update_logs_vacancy_id_foreign")
}

model volunteer_files {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  vacancy_id BigInt    @db.UnsignedBigInt
  type       String    @db.VarChar(50)
  path       String    @db.VarChar(255)
  active     Boolean   @default(true)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  vacancies  vacancies @relation(fields: [vacancy_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "volunteer_files_vacancy_id_foreign")

  @@index([vacancy_id], map: "volunteer_files_vacancy_id_foreign")
}

enum company_user_type {
  owner
  confidant
}

enum company_user_status {
  pending
  accepted
  suspended
  canceled
}

enum confidant_invitations_status {
  pending
  accepted
  canceled
}

enum eaeu_employee_connect_family_members_from {
  register
  add_family_member
}

enum companies_type {
  legal_person
  independent_taxpayer
}

enum eaeu_employee_card_extension_requests_status {
  pending
  pending_ms
  allowed
  rejected
  canceled
}

enum eaeu_employee_card_recovery_requests_status {
  pending
  allowed
  rejected
  canceled
}

enum eaeu_employee_family_member_card_extension_requests_status {
  pending
  pending_ms
  allowed
  rejected
  canceled
}

enum eaeu_employee_family_member_card_recovery_requests_status {
  pending
  allowed
  rejected
  canceled
}

enum in_progress_vacancy_employee_opinions_status {
  allowed
  rejected
}

enum vacancy_employee_opinions_status {
  allowed
  rejected
}

enum employee_card_recovery_requests_status {
  pending
  allowed
  rejected
  canceled
}

enum ms_card_receipts_receipt_type {
  owner
  confident
  applicant
}

enum sekt_crossing_infos_direction {
  IN
  OUT
}

enum employee_card_extension_requests_status {
  pending
  pending_ms
  allowed
  rejected
  canceled
}

enum in_progress_vacancies_status {
  pending_foreigner
  pending
  pending_ms
  allowed
  finished
  paused
}

enum employee_ssn_requests_status {
  pending
  provided
}

enum ms_cards_status {
  active
  suspended
}

enum vacancies_status {
  pending_am
  pending_foreigner
  pending
  pending_ms
  allowed
  finished
  paused
}

enum ms_requests_status {
  pending_ms
  pending_user
  rejected
  closed
}
