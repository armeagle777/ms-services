
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.13.0
 * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
 */
Prisma.prismaVersion = {
  client: "6.13.0",
  engine: "361e86d0ea4987e9f53a565309b3eed797a6bcbd"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.Court_appeal_typesScalarFieldEnum = {
  appeal_type_id: 'appeal_type_id',
  appeal_type: 'appeal_type'
};

exports.Prisma.Court_appealsScalarFieldEnum = {
  appeal_id: 'appeal_id',
  case_id: 'case_id',
  claim_id: 'claim_id',
  court_accept_date: 'court_accept_date',
  actual: 'actual',
  filled_in: 'filled_in',
  filled_by: 'filled_by',
  court_level: 'court_level',
  court_name: 'court_name'
};

exports.Prisma.Court_claim_initiatorsScalarFieldEnum = {
  id: 'id',
  initiator_name: 'initiator_name'
};

exports.Prisma.Court_claim_membersScalarFieldEnum = {
  id: 'id',
  claim_id: 'claim_id',
  case_id: 'case_id',
  person_id: 'person_id',
  created_at: 'created_at',
  actual: 'actual'
};

exports.Prisma.Court_claimsScalarFieldEnum = {
  claim_id: 'claim_id',
  claim_serial_number: 'claim_serial_number',
  claim_date: 'claim_date',
  appealable_ms_decision: 'appealable_ms_decision',
  appealable_court_decision: 'appealable_court_decision',
  appealable_claim: 'appealable_claim',
  filled_by: 'filled_by',
  filled_in_date: 'filled_in_date',
  ms_notified_date: 'ms_notified_date',
  ms_lawyer: 'ms_lawyer',
  case_id: 'case_id',
  court_level: 'court_level',
  actual: 'actual',
  initiator: 'initiator',
  claim_status: 'claim_status',
  appeal_type: 'appeal_type',
  status_change_date: 'status_change_date'
};

exports.Prisma.Court_cliam_statusScalarFieldEnum = {
  id: 'id',
  court_level: 'court_level',
  name: 'name',
  button_value: 'button_value'
};

exports.Prisma.Court_decision_typesScalarFieldEnum = {
  court_decision_type_id: 'court_decision_type_id',
  court_type: 'court_type',
  court_decision: 'court_decision'
};

exports.Prisma.Court_decisionsScalarFieldEnum = {
  court_decision_id: 'court_decision_id',
  appeal_id: 'appeal_id',
  decission_type: 'decission_type',
  decison_date: 'decison_date',
  decision_notification_date: 'decision_notification_date',
  input_date: 'input_date',
  input_by: 'input_by',
  actual: 'actual'
};

exports.Prisma.Court_levelsScalarFieldEnum = {
  court_id: 'court_id',
  court_title: 'court_title'
};

exports.Prisma.Cover_sign_statusScalarFieldEnum = {
  sign_status_id: 'sign_status_id',
  sign_status_name: 'sign_status_name'
};

exports.Prisma.FilesScalarFieldEnum = {
  id: 'id',
  file_name: 'file_name',
  uploaded_on: 'uploaded_on',
  file_type: 'file_type',
  uploader: 'uploader',
  case_id: 'case_id',
  decision_id: 'decision_id',
  inter_id: 'inter_id',
  coi_id: 'coi_id',
  person_id: 'person_id',
  draft_id: 'draft_id',
  claim_id: 'claim_id',
  appeal_id: 'appeal_id',
  file_path: 'file_path',
  process_type_id: 'process_type_id',
  actual: 'actual'
};

exports.Prisma.IpsScalarFieldEnum = {
  id: 'id',
  ip: 'ip',
  created_at: 'created_at'
};

exports.Prisma.Old_case_decisionsScalarFieldEnum = {
  old_decision_id: 'old_decision_id',
  old_case_id: 'old_case_id',
  ms_decision: 'ms_decision',
  ms_decision_date: 'ms_decision_date',
  final_decision: 'final_decision',
  final_decision_date: 'final_decision_date'
};

exports.Prisma.Old_case_personScalarFieldEnum = {
  old_person_id: 'old_person_id',
  old_case_id: 'old_case_id',
  f_name_arm: 'f_name_arm',
  l_name_arm: 'l_name_arm',
  p_name_arm: 'p_name_arm',
  f_name_eng: 'f_name_eng',
  l_name_eng: 'l_name_eng',
  p_name_eng: 'p_name_eng',
  sex: 'sex',
  b_day: 'b_day',
  b_month: 'b_month',
  b_year: 'b_year',
  role: 'role',
  citizenship_id: 'citizenship_id',
  card_num: 'card_num',
  doc_num: 'doc_num',
  etnicity: 'etnicity',
  religion: 'religion',
  invalid: 'invalid',
  pregnant: 'pregnant',
  seriously_ill: 'seriously_ill',
  trafficking_victim: 'trafficking_victim',
  violence_victim: 'violence_victim',
  comment: 'comment',
  illegal_border: 'illegal_border',
  transfer_moj: 'transfer_moj',
  deport_prescurator: 'deport_prescurator',
  prison: 'prison',
  image: 'image',
  pnum: 'pnum',
  doc_type: 'doc_type',
  document_num: 'document_num',
  status: 'status'
};

exports.Prisma.Old_casesScalarFieldEnum = {
  old_case_id: 'old_case_id',
  application_date: 'application_date',
  citizenship: 'citizenship',
  RA_address: 'RA_address',
  building: 'building',
  apartment: 'apartment',
  marz_id: 'marz_id',
  community_id: 'community_id',
  bnak_id: 'bnak_id',
  unaccompanied_child: 'unaccompanied_child',
  separated_child: 'separated_child',
  single_parent: 'single_parent',
  prefered_language: 'prefered_language',
  contact_tel: 'contact_tel',
  comment: 'comment'
};

exports.Prisma.Tb_arm_comScalarFieldEnum = {
  community_id: 'community_id',
  marz_id: 'marz_id',
  ADM3_PCODE: 'ADM3_PCODE',
  ADM3_ARM: 'ADM3_ARM',
  ADM3_EN: 'ADM3_EN',
  exist: 'exist',
  active: 'active'
};

exports.Prisma.Tb_arm_com__ScalarFieldEnum = {
  community_id: 'community_id',
  marz_id: 'marz_id',
  ADM3_PCODE: 'ADM3_PCODE',
  ADM3_ARM: 'ADM3_ARM',
  ADM3_EN: 'ADM3_EN'
};

exports.Prisma.Tb_calendarScalarFieldEnum = {
  interview_id: 'interview_id',
  case_id: 'case_id',
  user_id: 'user_id',
  inter_comment: 'inter_comment',
  inter_date_from: 'inter_date_from',
  inter_date_to: 'inter_date_to',
  text_color: 'text_color',
  border_color: 'border_color',
  actual_event: 'actual_event'
};

exports.Prisma.Tb_cancelScalarFieldEnum = {
  id: 'id',
  personal_id: 'personal_id',
  case_id: 'case_id',
  decision_date: 'decision_date',
  uploader: 'uploader',
  uploaded: 'uploaded',
  file_id: 'file_id'
};

exports.Prisma.Tb_cardsScalarFieldEnum = {
  card_id: 'card_id',
  serial: 'serial',
  card_number: 'card_number',
  personal_id: 'personal_id',
  issued: 'issued',
  full_address: 'full_address',
  valid: 'valid',
  bar: 'bar',
  printed: 'printed',
  actual_card: 'actual_card'
};

exports.Prisma.Tb_caseScalarFieldEnum = {
  case_id: 'case_id',
  application_date: 'application_date',
  input_date: 'input_date',
  reg_by: 'reg_by',
  officer: 'officer',
  preferred_lawyer: 'preferred_lawyer',
  unaccompanied_child: 'unaccompanied_child',
  separated_child: 'separated_child',
  single_parent: 'single_parent',
  prefered_language: 'prefered_language',
  RA_marz: 'RA_marz',
  RA_community: 'RA_community',
  RA_settlement: 'RA_settlement',
  RA_street: 'RA_street',
  RA_building: 'RA_building',
  RA_apartment: 'RA_apartment',
  contact_tel: 'contact_tel',
  contact_email: 'contact_email',
  comment: 'comment',
  case_status: 'case_status',
  mul_num: 'mul_num',
  mul_date: 'mul_date',
  MS_lawyer: 'MS_lawyer',
  special: 'special',
  reopened: 'reopened',
  attached_case: 'attached_case'
};

exports.Prisma.Tb_case_statusScalarFieldEnum = {
  case_status_id: 'case_status_id',
  case_status: 'case_status',
  case_status_eng: 'case_status_eng'
};

exports.Prisma.Tb_checkinScalarFieldEnum = {
  checkin_id: 'checkin_id',
  checkin_date: 'checkin_date',
  checkout_date: 'checkout_date',
  personal_id: 'personal_id',
  order_id: 'order_id',
  status: 'status',
  doss_id: 'doss_id'
};

exports.Prisma.Tb_coiScalarFieldEnum = {
  coi_id: 'coi_id',
  from_officer: 'from_officer',
  to_coispec: 'to_coispec',
  case_id: 'case_id',
  request_date: 'request_date',
  request_deadline: 'request_deadline',
  description: 'description',
  request_text: 'request_text',
  coi_state: 'coi_state',
  request_count: 'request_count',
  response_date: 'response_date',
  coi_status: 'coi_status'
};

exports.Prisma.Tb_countryScalarFieldEnum = {
  country_id: 'country_id',
  country_eng: 'country_eng',
  country_arm: 'country_arm'
};

exports.Prisma.Tb_cover_filesScalarFieldEnum = {
  cover_file_id: 'cover_file_id',
  type: 'type',
  file_name: 'file_name',
  cover_status: 'cover_status',
  case_id: 'case_id',
  translation_id: 'translation_id',
  cover_actual: 'cover_actual'
};

exports.Prisma.Tb_deadlineScalarFieldEnum = {
  id: 'id',
  case_id: 'case_id',
  deadline_type: 'deadline_type',
  deadline: 'deadline',
  actual_dead: 'actual_dead',
  process_type_id: 'process_type_id'
};

exports.Prisma.Tb_deadline_typesScalarFieldEnum = {
  deadline_type_id: 'deadline_type_id',
  deadline_type: 'deadline_type'
};

exports.Prisma.Tb_decision_statusScalarFieldEnum = {
  decision_status_id: 'decision_status_id',
  decision_status: 'decision_status',
  decision_status_eng: 'decision_status_eng'
};

exports.Prisma.Tb_decision_typesScalarFieldEnum = {
  decision_type_id: 'decision_type_id',
  decision_type: 'decision_type',
  decision_type_eng: 'decision_type_eng'
};

exports.Prisma.Tb_decisionsScalarFieldEnum = {
  decision_id: 'decision_id',
  case_id: 'case_id',
  decision_type: 'decision_type',
  decison_date: 'decison_date',
  decision_status: 'decision_status',
  actual: 'actual',
  decision_out_num: 'decision_out_num'
};

exports.Prisma.Tb_dossScalarFieldEnum = {
  doss_id: 'doss_id',
  room_num: 'room_num',
  doss: 'doss',
  doss_status: 'doss_status',
  doss_type: 'doss_type',
  doss_sex: 'doss_sex'
};

exports.Prisma.Tb_draftScalarFieldEnum = {
  draft_id: 'draft_id',
  case_id: 'case_id',
  autor: 'autor',
  uploaded: 'uploaded',
  receiver: 'receiver',
  actual: 'actual'
};

exports.Prisma.Tb_droomsScalarFieldEnum = {
  room_id: 'room_id',
  room_num: 'room_num',
  floor: 'floor',
  type: 'type',
  capacity: 'capacity',
  room_sex: 'room_sex'
};

exports.Prisma.Tb_edu_lvlScalarFieldEnum = {
  lvl_id: 'lvl_id',
  edu_lvl: 'edu_lvl'
};

exports.Prisma.Tb_educationScalarFieldEnum = {
  edu_id: 'edu_id',
  specialization: 'specialization',
  institution: 'institution',
  edu_lvl: 'edu_lvl',
  start_year: 'start_year',
  end_year: 'end_year',
  personal_id: 'personal_id'
};

exports.Prisma.Tb_employmentScalarFieldEnum = {
  employment_id: 'employment_id',
  start_date: 'start_date',
  end_date: 'end_date',
  occupation: 'occupation',
  organization: 'organization',
  personal_id: 'personal_id'
};

exports.Prisma.Tb_etnicsScalarFieldEnum = {
  etnic_id: 'etnic_id',
  etnic_arm: 'etnic_arm',
  etnic_eng: 'etnic_eng'
};

exports.Prisma.Tb_file_typeScalarFieldEnum = {
  file_type_id: 'file_type_id',
  file_type: 'file_type',
  file_filter: 'file_filter'
};

exports.Prisma.Tb_handedScalarFieldEnum = {
  handed_id: 'handed_id',
  case_id: 'case_id',
  decision_id: 'decision_id',
  created: 'created',
  hended_by: 'hended_by',
  signed_page: 'signed_page'
};

exports.Prisma.Tb_interScalarFieldEnum = {
  inter_id: 'inter_id',
  case_id: 'case_id',
  author_id: 'author_id',
  inter_status: 'inter_status',
  inter_reciever: 'inter_reciever',
  inter_type: 'inter_type',
  send_type: 'send_type',
  out_num: 'out_num'
};

exports.Prisma.Tb_inter_notifiedScalarFieldEnum = {
  inter_notified_id: 'inter_notified_id',
  notified_date: 'notified_date',
  actioned: 'actioned',
  file_name: 'file_name',
  inter_id: 'inter_id',
  notification_status: 'notification_status'
};

exports.Prisma.Tb_inter_reciversScalarFieldEnum = {
  inter_reciever_id: 'inter_reciever_id',
  inter_reciever_text: 'inter_reciever_text'
};

exports.Prisma.Tb_inter_send_typeScalarFieldEnum = {
  inter_send_type_id: 'inter_send_type_id',
  inter_send_type: 'inter_send_type'
};

exports.Prisma.Tb_inter_status_typesScalarFieldEnum = {
  id: 'id',
  inter_status_type: 'inter_status_type'
};

exports.Prisma.Tb_inter_typeScalarFieldEnum = {
  inter_type_id: 'inter_type_id',
  inter_type: 'inter_type'
};

exports.Prisma.Tb_lawyerScalarFieldEnum = {
  lawyer_id: 'lawyer_id',
  lawyer_name: 'lawyer_name',
  lawyer_surname: 'lawyer_surname',
  lawyer_organization: 'lawyer_organization',
  lawyer_tel: 'lawyer_tel',
  lawyer_address: 'lawyer_address',
  lawyer_email: 'lawyer_email',
  case_id: 'case_id',
  actual: 'actual'
};

exports.Prisma.Tb_marzScalarFieldEnum = {
  marz_id: 'marz_id',
  ADM1_ARM: 'ADM1_ARM',
  ADM1_EN: 'ADM1_EN',
  ADM1_PCODE: 'ADM1_PCODE'
};

exports.Prisma.Tb_membersScalarFieldEnum = {
  member_id: 'member_id',
  case_id: 'case_id',
  f_name_arm: 'f_name_arm',
  f_name_eng: 'f_name_eng',
  l_name_arm: 'l_name_arm',
  l_name_eng: 'l_name_eng',
  m_name_arm: 'm_name_arm',
  m_name_eng: 'm_name_eng',
  b_day: 'b_day',
  b_month: 'b_month',
  b_year: 'b_year',
  sex: 'sex',
  citizenship: 'citizenship',
  residence: 'residence',
  role: 'role'
};

exports.Prisma.Tb_notificationsScalarFieldEnum = {
  comment_id: 'comment_id',
  comment_subject: 'comment_subject',
  comment_text: 'comment_text',
  comment_status: 'comment_status',
  comment_from: 'comment_from',
  comment_to: 'comment_to',
  case_id: 'case_id',
  coi_id: 'coi_id',
  request_id: 'request_id',
  note_type: 'note_type',
  draft_id: 'draft_id',
  order_id: 'order_id',
  readed: 'readed',
  note_date: 'note_date',
  msg_read: 'msg_read'
};

exports.Prisma.Tb_ordersScalarFieldEnum = {
  order_id: 'order_id',
  case_id: 'case_id',
  order_status: 'order_status',
  date: 'date'
};

exports.Prisma.Tb_personScalarFieldEnum = {
  personal_id: 'personal_id',
  case_id: 'case_id',
  f_name_arm: 'f_name_arm',
  f_name_eng: 'f_name_eng',
  l_name_arm: 'l_name_arm',
  l_name_eng: 'l_name_eng',
  m_name_arm: 'm_name_arm',
  m_name_eng: 'm_name_eng',
  b_day: 'b_day',
  b_month: 'b_month',
  b_year: 'b_year',
  sex: 'sex',
  citizenship: 'citizenship',
  previous_residence: 'previous_residence',
  citizen_adr: 'citizen_adr',
  residence_adr: 'residence_adr',
  departure_from_citizen: 'departure_from_citizen',
  departure_from_residence: 'departure_from_residence',
  arrival_date: 'arrival_date',
  doc_num: 'doc_num',
  etnicity: 'etnicity',
  religion: 'religion',
  preferred_traslator_sex: 'preferred_traslator_sex',
  preferred_interviewer_sex: 'preferred_interviewer_sex',
  invalid: 'invalid',
  pregnant: 'pregnant',
  seriously_ill: 'seriously_ill',
  trafficking_victim: 'trafficking_victim',
  violence_victim: 'violence_victim',
  comment: 'comment',
  illegal_border: 'illegal_border',
  transfer_moj: 'transfer_moj',
  deport_prescurator: 'deport_prescurator',
  prison: 'prison',
  role: 'role',
  image: 'image',
  person_status: 'person_status',
  ident: 'ident',
  pnum: 'pnum',
  doc_type: 'doc_type',
  document_num: 'document_num',
  doc_issued_date: 'doc_issued_date',
  doc_valid: 'doc_valid',
  doc_issued_by: 'doc_issued_by',
  bpr_community: 'bpr_community',
  bpr_bnakavayr: 'bpr_bnakavayr',
  bpr_street: 'bpr_street',
  bpr_house: 'bpr_house',
  bpr_aprt: 'bpr_aprt',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Tb_person_statusScalarFieldEnum = {
  person_status_id: 'person_status_id',
  person_status: 'person_status',
  person_status_eng: 'person_status_eng'
};

exports.Prisma.Tb_processScalarFieldEnum = {
  process_id: 'process_id',
  process_type_id: 'process_type_id',
  case_id: 'case_id',
  draft_id: 'draft_id',
  coi_id: 'coi_id',
  request_id: 'request_id',
  order_id: 'order_id',
  decision_id: 'decision_id',
  notification_id: 'notification_id',
  sign_status: 'sign_status',
  sign_date: 'sign_date',
  sign_by: 'sign_by',
  processor: 'processor',
  comment_to: 'comment_to',
  actual: 'actual',
  comment_status: 'comment_status',
  out_num: 'out_num'
};

exports.Prisma.Tb_process_typeScalarFieldEnum = {
  process_type_id: 'process_type_id',
  process_type: 'process_type'
};

exports.Prisma.Tb_religionsScalarFieldEnum = {
  religion_id: 'religion_id',
  religion_arm: 'religion_arm',
  religion_eng: 'religion_eng'
};

exports.Prisma.Tb_request_bodiesScalarFieldEnum = {
  body_id: 'body_id',
  body: 'body'
};

exports.Prisma.Tb_request_outScalarFieldEnum = {
  request_id: 'request_id',
  case_id: 'case_id',
  author: 'author',
  body: 'body',
  request_date: 'request_date',
  request_status: 'request_status'
};

exports.Prisma.Tb_roleScalarFieldEnum = {
  role_id: 'role_id',
  der: 'der'
};

exports.Prisma.Tb_settlementScalarFieldEnum = {
  settlement_id: 'settlement_id',
  com_id: 'com_id',
  ADM3_CODE: 'ADM3_CODE',
  ADM4_PCODE: 'ADM4_PCODE',
  ADM4_ARM: 'ADM4_ARM',
  ADM4_ENG: 'ADM4_ENG'
};

exports.Prisma.Tb_settlement_ScalarFieldEnum = {
  settlement_id: 'settlement_id',
  com_id: 'com_id',
  ADM3_CODE: 'ADM3_CODE',
  ADM4_PCODE: 'ADM4_PCODE',
  ADM4_ARM: 'ADM4_ARM',
  ADM4_ENG: 'ADM4_ENG',
  active: 'active'
};

exports.Prisma.Tb_sign_statusScalarFieldEnum = {
  status_id: 'status_id',
  status: 'status'
};

exports.Prisma.Tb_translateScalarFieldEnum = {
  translate_id: 'translate_id',
  case_id: 'case_id',
  translate_type: 'translate_type',
  user_from: 'user_from',
  user_to: 'user_to',
  filled_in_date: 'filled_in_date',
  translator_company: 'translator_company',
  file_path: 'file_path',
  file_ids: 'file_ids',
  translate_date: 'translate_date',
  translate_time_from: 'translate_time_from',
  translate_time_to: 'translate_time_to',
  sign_status: 'sign_status',
  mailed_to_translators: 'mailed_to_translators'
};

exports.Prisma.Tb_translate_sign_statusesScalarFieldEnum = {
  status_id: 'status_id',
  sign_status: 'sign_status',
  sign_status_name: 'sign_status_name'
};

exports.Prisma.Tb_translation_typeScalarFieldEnum = {
  ttype_id: 'ttype_id',
  trans_type: 'trans_type'
};

exports.Prisma.Tb_translatorsScalarFieldEnum = {
  translator_id: 'translator_id',
  translator_name_arm: 'translator_name_arm',
  translator_name_eng: 'translator_name_eng',
  email: 'email',
  test_mail: 'test_mail',
  logo_file: 'logo_file',
  active_status: 'active_status'
};

exports.Prisma.UsersScalarFieldEnum = {
  id: 'id',
  username: 'username',
  password: 'password',
  f_name: 'f_name',
  l_name: 'l_name',
  user_type: 'user_type',
  user_status: 'user_status',
  last_activity: 'last_activity'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.court_appeal_typesOrderByRelevanceFieldEnum = {
  appeal_type: 'appeal_type'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.court_appealsOrderByRelevanceFieldEnum = {
  court_name: 'court_name'
};

exports.Prisma.court_claim_initiatorsOrderByRelevanceFieldEnum = {
  initiator_name: 'initiator_name'
};

exports.Prisma.court_claimsOrderByRelevanceFieldEnum = {
  claim_serial_number: 'claim_serial_number'
};

exports.Prisma.court_cliam_statusOrderByRelevanceFieldEnum = {
  name: 'name',
  button_value: 'button_value'
};

exports.Prisma.court_decision_typesOrderByRelevanceFieldEnum = {
  court_decision: 'court_decision'
};

exports.Prisma.court_levelsOrderByRelevanceFieldEnum = {
  court_title: 'court_title'
};

exports.Prisma.cover_sign_statusOrderByRelevanceFieldEnum = {
  sign_status_name: 'sign_status_name'
};

exports.Prisma.filesOrderByRelevanceFieldEnum = {
  file_name: 'file_name',
  file_path: 'file_path'
};

exports.Prisma.ipsOrderByRelevanceFieldEnum = {
  ip: 'ip'
};

exports.Prisma.old_case_personOrderByRelevanceFieldEnum = {
  f_name_arm: 'f_name_arm',
  l_name_arm: 'l_name_arm',
  p_name_arm: 'p_name_arm',
  f_name_eng: 'f_name_eng',
  l_name_eng: 'l_name_eng',
  p_name_eng: 'p_name_eng',
  b_day: 'b_day',
  b_month: 'b_month',
  b_year: 'b_year',
  card_num: 'card_num',
  doc_num: 'doc_num',
  comment: 'comment',
  image: 'image',
  pnum: 'pnum',
  document_num: 'document_num'
};

exports.Prisma.old_casesOrderByRelevanceFieldEnum = {
  RA_address: 'RA_address',
  building: 'building',
  apartment: 'apartment',
  prefered_language: 'prefered_language',
  contact_tel: 'contact_tel',
  comment: 'comment'
};

exports.Prisma.tb_arm_comOrderByRelevanceFieldEnum = {
  ADM3_PCODE: 'ADM3_PCODE',
  ADM3_ARM: 'ADM3_ARM',
  ADM3_EN: 'ADM3_EN'
};

exports.Prisma.tb_arm_com__OrderByRelevanceFieldEnum = {
  ADM3_PCODE: 'ADM3_PCODE',
  ADM3_ARM: 'ADM3_ARM',
  ADM3_EN: 'ADM3_EN'
};

exports.Prisma.tb_calendarOrderByRelevanceFieldEnum = {
  inter_comment: 'inter_comment',
  text_color: 'text_color',
  border_color: 'border_color'
};

exports.Prisma.tb_cardsOrderByRelevanceFieldEnum = {
  serial: 'serial',
  full_address: 'full_address',
  bar: 'bar'
};

exports.Prisma.tb_caseOrderByRelevanceFieldEnum = {
  prefered_language: 'prefered_language',
  RA_street: 'RA_street',
  RA_building: 'RA_building',
  RA_apartment: 'RA_apartment',
  contact_tel: 'contact_tel',
  contact_email: 'contact_email',
  comment: 'comment',
  mul_num: 'mul_num'
};

exports.Prisma.tb_case_statusOrderByRelevanceFieldEnum = {
  case_status: 'case_status',
  case_status_eng: 'case_status_eng'
};

exports.Prisma.tb_coiOrderByRelevanceFieldEnum = {
  description: 'description',
  request_text: 'request_text'
};

exports.Prisma.tb_countryOrderByRelevanceFieldEnum = {
  country_eng: 'country_eng',
  country_arm: 'country_arm'
};

exports.Prisma.tb_cover_filesOrderByRelevanceFieldEnum = {
  file_name: 'file_name'
};

exports.Prisma.tb_deadline_typesOrderByRelevanceFieldEnum = {
  deadline_type: 'deadline_type'
};

exports.Prisma.tb_decision_statusOrderByRelevanceFieldEnum = {
  decision_status: 'decision_status',
  decision_status_eng: 'decision_status_eng'
};

exports.Prisma.tb_decision_typesOrderByRelevanceFieldEnum = {
  decision_type: 'decision_type',
  decision_type_eng: 'decision_type_eng'
};

exports.Prisma.tb_decisionsOrderByRelevanceFieldEnum = {
  decision_out_num: 'decision_out_num'
};

exports.Prisma.tb_dossOrderByRelevanceFieldEnum = {
  doss: 'doss',
  doss_type: 'doss_type'
};

exports.Prisma.tb_droomsOrderByRelevanceFieldEnum = {
  type: 'type'
};

exports.Prisma.tb_edu_lvlOrderByRelevanceFieldEnum = {
  edu_lvl: 'edu_lvl'
};

exports.Prisma.tb_educationOrderByRelevanceFieldEnum = {
  specialization: 'specialization',
  institution: 'institution',
  start_year: 'start_year',
  end_year: 'end_year'
};

exports.Prisma.tb_employmentOrderByRelevanceFieldEnum = {
  start_date: 'start_date',
  end_date: 'end_date',
  occupation: 'occupation',
  organization: 'organization'
};

exports.Prisma.tb_etnicsOrderByRelevanceFieldEnum = {
  etnic_arm: 'etnic_arm',
  etnic_eng: 'etnic_eng'
};

exports.Prisma.tb_file_typeOrderByRelevanceFieldEnum = {
  file_type: 'file_type'
};

exports.Prisma.tb_handedOrderByRelevanceFieldEnum = {
  signed_page: 'signed_page'
};

exports.Prisma.tb_interOrderByRelevanceFieldEnum = {
  out_num: 'out_num'
};

exports.Prisma.tb_inter_notifiedOrderByRelevanceFieldEnum = {
  file_name: 'file_name'
};

exports.Prisma.tb_inter_reciversOrderByRelevanceFieldEnum = {
  inter_reciever_text: 'inter_reciever_text'
};

exports.Prisma.tb_inter_send_typeOrderByRelevanceFieldEnum = {
  inter_send_type: 'inter_send_type'
};

exports.Prisma.tb_inter_status_typesOrderByRelevanceFieldEnum = {
  inter_status_type: 'inter_status_type'
};

exports.Prisma.tb_inter_typeOrderByRelevanceFieldEnum = {
  inter_type: 'inter_type'
};

exports.Prisma.tb_lawyerOrderByRelevanceFieldEnum = {
  lawyer_name: 'lawyer_name',
  lawyer_surname: 'lawyer_surname',
  lawyer_organization: 'lawyer_organization',
  lawyer_tel: 'lawyer_tel',
  lawyer_address: 'lawyer_address',
  lawyer_email: 'lawyer_email'
};

exports.Prisma.tb_marzOrderByRelevanceFieldEnum = {
  ADM1_ARM: 'ADM1_ARM',
  ADM1_EN: 'ADM1_EN',
  ADM1_PCODE: 'ADM1_PCODE'
};

exports.Prisma.tb_membersOrderByRelevanceFieldEnum = {
  f_name_arm: 'f_name_arm',
  f_name_eng: 'f_name_eng',
  l_name_arm: 'l_name_arm',
  l_name_eng: 'l_name_eng',
  m_name_arm: 'm_name_arm',
  m_name_eng: 'm_name_eng',
  b_day: 'b_day',
  b_month: 'b_month',
  b_year: 'b_year'
};

exports.Prisma.tb_notificationsOrderByRelevanceFieldEnum = {
  comment_subject: 'comment_subject',
  comment_text: 'comment_text'
};

exports.Prisma.tb_personOrderByRelevanceFieldEnum = {
  f_name_arm: 'f_name_arm',
  f_name_eng: 'f_name_eng',
  l_name_arm: 'l_name_arm',
  l_name_eng: 'l_name_eng',
  m_name_arm: 'm_name_arm',
  m_name_eng: 'm_name_eng',
  b_day: 'b_day',
  b_month: 'b_month',
  b_year: 'b_year',
  citizen_adr: 'citizen_adr',
  residence_adr: 'residence_adr',
  departure_from_citizen: 'departure_from_citizen',
  departure_from_residence: 'departure_from_residence',
  doc_num: 'doc_num',
  comment: 'comment',
  image: 'image',
  pnum: 'pnum',
  doc_type: 'doc_type',
  document_num: 'document_num',
  doc_issued_by: 'doc_issued_by',
  bpr_community: 'bpr_community',
  bpr_bnakavayr: 'bpr_bnakavayr',
  bpr_street: 'bpr_street',
  bpr_house: 'bpr_house',
  bpr_aprt: 'bpr_aprt'
};

exports.Prisma.tb_person_statusOrderByRelevanceFieldEnum = {
  person_status: 'person_status',
  person_status_eng: 'person_status_eng'
};

exports.Prisma.tb_processOrderByRelevanceFieldEnum = {
  comment_to: 'comment_to',
  out_num: 'out_num'
};

exports.Prisma.tb_process_typeOrderByRelevanceFieldEnum = {
  process_type: 'process_type'
};

exports.Prisma.tb_religionsOrderByRelevanceFieldEnum = {
  religion_arm: 'religion_arm',
  religion_eng: 'religion_eng'
};

exports.Prisma.tb_request_bodiesOrderByRelevanceFieldEnum = {
  body: 'body'
};

exports.Prisma.tb_roleOrderByRelevanceFieldEnum = {
  der: 'der'
};

exports.Prisma.tb_settlementOrderByRelevanceFieldEnum = {
  ADM3_CODE: 'ADM3_CODE',
  ADM4_PCODE: 'ADM4_PCODE',
  ADM4_ARM: 'ADM4_ARM',
  ADM4_ENG: 'ADM4_ENG'
};

exports.Prisma.tb_settlement_OrderByRelevanceFieldEnum = {
  ADM3_CODE: 'ADM3_CODE',
  ADM4_PCODE: 'ADM4_PCODE',
  ADM4_ARM: 'ADM4_ARM',
  ADM4_ENG: 'ADM4_ENG'
};

exports.Prisma.tb_sign_statusOrderByRelevanceFieldEnum = {
  status: 'status'
};

exports.Prisma.tb_translateOrderByRelevanceFieldEnum = {
  file_path: 'file_path',
  file_ids: 'file_ids',
  translate_time_from: 'translate_time_from',
  translate_time_to: 'translate_time_to'
};

exports.Prisma.tb_translate_sign_statusesOrderByRelevanceFieldEnum = {
  sign_status_name: 'sign_status_name'
};

exports.Prisma.tb_translation_typeOrderByRelevanceFieldEnum = {
  trans_type: 'trans_type'
};

exports.Prisma.tb_translatorsOrderByRelevanceFieldEnum = {
  translator_name_arm: 'translator_name_arm',
  translator_name_eng: 'translator_name_eng',
  email: 'email',
  test_mail: 'test_mail',
  logo_file: 'logo_file'
};

exports.Prisma.usersOrderByRelevanceFieldEnum = {
  username: 'username',
  password: 'password',
  f_name: 'f_name',
  l_name: 'l_name',
  user_type: 'user_type'
};
exports.tb_inter_notified_notification_status = exports.$Enums.tb_inter_notified_notification_status = {
  notified: 'notified',
  not_notified: 'not_notified',
  EMPTY_ENUM_VALUE: 'EMPTY_ENUM_VALUE'
};

exports.Prisma.ModelName = {
  court_appeal_types: 'court_appeal_types',
  court_appeals: 'court_appeals',
  court_claim_initiators: 'court_claim_initiators',
  court_claim_members: 'court_claim_members',
  court_claims: 'court_claims',
  court_cliam_status: 'court_cliam_status',
  court_decision_types: 'court_decision_types',
  court_decisions: 'court_decisions',
  court_levels: 'court_levels',
  cover_sign_status: 'cover_sign_status',
  files: 'files',
  ips: 'ips',
  old_case_decisions: 'old_case_decisions',
  old_case_person: 'old_case_person',
  old_cases: 'old_cases',
  tb_arm_com: 'tb_arm_com',
  tb_arm_com__: 'tb_arm_com__',
  tb_calendar: 'tb_calendar',
  tb_cancel: 'tb_cancel',
  tb_cards: 'tb_cards',
  tb_case: 'tb_case',
  tb_case_status: 'tb_case_status',
  tb_checkin: 'tb_checkin',
  tb_coi: 'tb_coi',
  tb_country: 'tb_country',
  tb_cover_files: 'tb_cover_files',
  tb_deadline: 'tb_deadline',
  tb_deadline_types: 'tb_deadline_types',
  tb_decision_status: 'tb_decision_status',
  tb_decision_types: 'tb_decision_types',
  tb_decisions: 'tb_decisions',
  tb_doss: 'tb_doss',
  tb_draft: 'tb_draft',
  tb_drooms: 'tb_drooms',
  tb_edu_lvl: 'tb_edu_lvl',
  tb_education: 'tb_education',
  tb_employment: 'tb_employment',
  tb_etnics: 'tb_etnics',
  tb_file_type: 'tb_file_type',
  tb_handed: 'tb_handed',
  tb_inter: 'tb_inter',
  tb_inter_notified: 'tb_inter_notified',
  tb_inter_recivers: 'tb_inter_recivers',
  tb_inter_send_type: 'tb_inter_send_type',
  tb_inter_status_types: 'tb_inter_status_types',
  tb_inter_type: 'tb_inter_type',
  tb_lawyer: 'tb_lawyer',
  tb_marz: 'tb_marz',
  tb_members: 'tb_members',
  tb_notifications: 'tb_notifications',
  tb_orders: 'tb_orders',
  tb_person: 'tb_person',
  tb_person_status: 'tb_person_status',
  tb_process: 'tb_process',
  tb_process_type: 'tb_process_type',
  tb_religions: 'tb_religions',
  tb_request_bodies: 'tb_request_bodies',
  tb_request_out: 'tb_request_out',
  tb_role: 'tb_role',
  tb_settlement: 'tb_settlement',
  tb_settlement_: 'tb_settlement_',
  tb_sign_status: 'tb_sign_status',
  tb_translate: 'tb_translate',
  tb_translate_sign_statuses: 'tb_translate_sign_statuses',
  tb_translation_type: 'tb_translation_type',
  tb_translators: 'tb_translators',
  users: 'users'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
